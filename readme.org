#+Title: Jacob's Emacs Configuration
#+Author: Jacob Duijzer
#+Description: 
#+Startup: showeverything
#+Options: toc:2

* Table Of Contents :TOC_4:
- [[#global-emacs-configuration][Global Emacs Configuration]]
  - [[#startup-performance][Startup Performance]]
  - [[#use-package][Use Package]]
  - [[#load-evil-mode][Load Evil Mode]]
  - [[#general-keybindings][General Keybindings]]
  - [[#sane-defaults][Sane defaults]]
  - [[#set-theme][Set Theme]]
  - [[#setting-fonts][Setting fonts]]
  - [[#nerd-icons][Nerd Icons]]
  - [[#zooming-inout][Zooming In/Out]]
  - [[#modeline][Modeline]]
  - [[#dashboard][Dashboard]]
  - [[#dashboard-in-emacsclient][Dashboard in Emacsclient]]
- [[#custom-functions][Custom functions]]
  - [[#transparency-for-overlay-editing][Transparency for overlay editing]]
- [[#org][Org]]
  - [[#org-mode][Org-mode]]
  - [[#default-file-actions][Default file actions]]
  - [[#org-definitions][Org definitions]]
  - [[#auto-update-images][Auto update images]]
  - [[#agenda][Agenda]]
  - [[#alerts--notifications][Alerts / Notifications]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#source-code-block-tag-expansion][Source Code Block Tag Expansion]]
  - [[#org-roam][Org Roam]]
- [[#other-packages][Other packages]]
  - [[#blogging-with-hugo][Blogging with Hugo]]
  - [[#magit][Magit]]
  - [[#projectile][Projectile]]
  - [[#company][Company]]
  - [[#ivy-counsel][Ivy (counsel)]]
  - [[#diminish][DIMINISH]]
  - [[#which-key][WHICH-KEY]]
  - [[#nix-mode][Nix mode]]
  - [[#plantuml][PlantUML]]
  - [[#gherkin][Gherkin]]
  - [[#yasnippet][YASnippet]]
  - [[#spell-checking][Spell checking]]
  - [[#runtime-performance][Runtime Performance]]
  - [[#commenting-lines][Commenting lines]]
  - [[#webjump][Webjump]]
- [[#trying-out][Trying out]]
  - [[#eat-terminal-emulation][Eat (terminal emulation)]]

* Global Emacs Configuration

** Startup Performance
Make startup faster by reducing the frequency of garbage collection. This will be set back when startup finishes.
#+begin_src emacs-lisp
    ;; The default is 800 kilobytes.  Measured in bytes.
    (setq gc-cons-threshold (* 50 1000 1000))
#+end_src

** Use Package
I used the default package manager package.el with use-package. Alternative package managers (straight.el, elpaca, etc..) are useful if you want to
install packages from github, if you want a specific, not very popular package that is not available on elpa or melpa.
or you want UI (elpaca) and other things.

If you are interested in these other package managers, check out their github repositories or search for more package managers.
In my experience Package.el is not slow and gets the job done.

To update/upgrade packages, use the package-upgrade-all command.
With Emacs 29 use-package is now build in.
#+begin_src emacs-lisp
    (require 'package)
    (require 'use-package) ;; requires package.el and use-package so we can use it
    (setq use-package-always-ensure t) ;; always ensures that a package is installed
    (setq package-archives '(("melpa" . "https://melpa.org/packages/") ;; Sets default package repositories
                             ("org" . "https://orgmode.org/elpa/")
                             ("elpa" . "https://elpa.gnu.org/packages/")
                             ("nongnu" . "https://elpa.nongnu.org/nongnu/"))) ;; For Eat Terminal
#+end_src

** Load Evil Mode
Evil is an extensible vi/vim layer for Emacs.  Because…let’s face it.  The Vim keybindings are just plain better.
Note: To paste without copy (yank) selected text use P (shift P evil-paste-before), because default is evil-paste-after.
You can toggle evil mode with ctrl z (emacs-mode)
#+begin_src emacs-lisp
    (use-package evil
      :init ;; tweak evil's configuration before loading it
      (setq evil-want-keybinding nil) ;; Disable evil bindings in other modes (It's not consistent and not good)
      (setq evil-want-C-u-scroll t) ;; Set  C-u to scrool up
      (setq evil-want-C-i-jump nil) ;; Disables C-i jump
      (setq evil-undo-system 'undo-redo) ;; C-r to redo
      (setq org-return-follows-link  t) ;; Sets RETURN key in org-mode to follow links
      (evil-mode))
    (use-package evil-collection
      :after evil
      :config
      ;; Setting where to use evil-collection
      (setq evil-collection-mode-list '(dired ibuffer magiti dashboard))
      (evil-collection-init))
    ;; Unmap keys in 'evil-maps. If not done, (setq org-return-follows-link t) will not work
    (with-eval-after-load 'evil-maps
      (define-key evil-motion-state-map (kbd "SPC") nil)
      (define-key evil-motion-state-map (kbd "RET") nil)
      (define-key evil-motion-state-map (kbd "TAB") nil))
#+end_src

** General Keybindings
General is a keybinding framework to set keybindings easily.
The Leader key is what you will press when you want to access your keybindings (Space + . Find file).
To search and replace start use query-replace-regexp one by one (SPACE to replace n to skip meta/alt ctrl %) [[https://stackoverflow.com/questions/270930/using-emacs-to-recursively-find-and-replace-in-text-files-not-already-open][Source]]
#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup)
  ;; set up 'SPC' as the global leader key
  (general-create-definer start/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "C-SPC") ;; access leader in insert mode

  (start/leader-keys
    "." '(find-file :wk "Find file")
    "TAB" '(comment-line :wk "Comment lines")
    "p" '(projectile-command-map :wk "Projectile command map"))

  (start/leader-keys
	"a" '(org-agenda :wk "Show Agenda"))

  (start/leader-keys
    "f" '(:ignore t :wk "Find")
    "f c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Edit emacs config")
    "f r" '(counsel-recentf :wk "Recent files"))

  (start/leader-keys
	)
  (start/leader-keys
    "b" '(:ignore t :wk "Buffer Bookmarks")
    "b b" '(switch-to-buffer :wk "Switch buffer")
    "b k" '(kill-this-buffer :wk "Kill this buffer")
    "b i" '(ibuffer :wk "Ibuffer")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer")
    "b R" '(rename-buffer :wk "Rename buffer")
    "b j" '(bookmark-jump :wk "Bookmark jump"))

  (start/leader-keys
    "d" '(:ignore t :wk "Dired")
    "d v" '(dired :wk "Open dired")
    "d j" '(dired-jump :wk "Dired jump to current"))

  (start/leader-keys
    "g" '(:ignore t :wk "Git")
    "g g" '(magit-status :wk "Magit status"))

  (start/leader-keys
    "h" '(:ignore t :wk "Help")
    "h c" '(company-manual-begin :wk "Company completion at point")
    "h r" '((lambda () (interactive)
              (load-file "~/.config/emacs/init.el"))
            :wk "Reload emacs config"))

  (start/leader-keys
	"r" '(:ignore t :wk "Org-Roam")
	"r t" '(org-roam-dailies-capture-today :wk "Capture Today")
	"r f" '(org-roam-node-find :wk "Find node")
	"r i" '(org-roam-node-find :wk "Insert node")
	"r j t" '(org-roam-dailies-capture-today :wk "Journal for today")
	"r j y" '(org-roam-dailies-capture-yesterday :wk "Journal for yesterday")
	"r j m" '(org-roam-dailies-capture-tomorrow :wk "Journal for tomorrow")
	"r v t" '(org-roam-dailies-goto-today :wk "View journal for today")
	"r v y" '(org-roam-dailies-goto-yesterday :wk "View journal for yesterday")
	"r v m" '(org-roam-dailies-goto-tomorrow :wk "View journal for tomorrow"))
  
  (start/leader-keys
    "s" '(:ignore t :wk "Show")
    "s e" '(eat :wk "Show Eat"))

  (start/leader-keys
    "t" '(:ignore t :wk "Toggle")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t t" '(visual-line-mode :wk "Toggle truncated lines (wrap)")))
#+end_src

#+RESULTS:
: t


** Sane defaults
#+begin_src emacs-lisp
    (delete-selection-mode 1)    ;; You can select text and delete it by typing.
    (electric-indent-mode -1)    ;; Turn off the weird indenting that Emacs does by default.
    (electric-pair-mode 1)       ;; Turns on automatic parens pairing

    (global-auto-revert-mode t)  ;; Automatically reload file and show changes if the file has changed
    (global-display-line-numbers-mode 1) ;; Display line numbers
    (global-visual-line-mode t)  ;; Enable truncated lines
    (menu-bar-mode -1)           ;; Disable the menu bar
    (scroll-bar-mode -1)         ;; Disable the scroll bar
    (tool-bar-mode -1)           ;; Disable the tool bar

    (setq mouse-wheel-progressive-speed nil) ;; Disable progressive speed when scrolling
    (setq scroll-conservatively 10) ;; Smooth scrolling when going down with scroll margin
    (setq scroll-margin 8)

    (setq make-backup-files nil) ; Stop creating ~ backup files
    (global-set-key [escape] 'keyboard-escape-quit) ;; Makes Escape quit prompts (Minibuffer Escape)
    (blink-cursor-mode 0) ;; Don't blink cursor
    (add-hook 'prog-mode-hook (lambda () (hs-minor-mode t))) ;; Enable folding hide/show globally

    (setq org-edit-src-content-indentation 4) ;; Set src block automatic indent to 4 instead of 2.
    (setq-default tab-width 4)

    (fset 'yes-or-no-p 'y-or-n-p) ; use y or n instead of yes or no
    (setq visible-bell 'visual)
    (setq ring-bell-function 'ignore)
#+end_src

** Set Theme
Set gruvbox theme if you want some themes to try out doom-themes
#+begin_src emacs-lisp
    (use-package gruvbox-theme
      :init
      (load-theme 'gruvbox-dark-medium t)) ;; We need to add t to trust this package
#+end_src

** Setting fonts
#+begin_src emacs-lisp
    (set-face-attribute 'default nil
                        :font "JetBrains Mono" ;; Set your favorite type of font or download JetBrains Mono
                        :height 120
                        :weight 'medium)
    ;; This sets the default font on all graphical frames created after restarting Emacs.
    ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
    ;; are not right unless I also add this method of setting the default font.
    ;; (add-to-list 'default-frame-alist '(font . "JetBrains Mono")) ;; Set your favorite font
    (setq-default line-spacing 0.12)
#+end_src

** Nerd Icons
For icons and more helpful ui.
This is an icon set that can be used with dired, ibuffer and other Emacs programs.

Don't forget to use nerd-icons-install-fonts.

We use Nerd icons because it has more, better icons and all-the-icons only supports GUI.
While nerd-icons supports both GUI and TUI.
#+begin_src emacs-lisp
    (use-package nerd-icons
      :if (display-graphic-p))

    (use-package nerd-icons-dired
      :hook (dired-mode . (lambda () (nerd-icons-dired-mode t))))

    (use-package nerd-icons-ibuffer
      :hook (ibuffer-mode . nerd-icons-ibuffer-mode))
#+end_src

** Zooming In/Out
You can use the bindings CTRL plus =/- for zooming in/out.  You can also use CTRL plus the mouse wheel for zooming in/out.
#+begin_src emacs-lisp
    (global-set-key (kbd "C-+") 'text-scale-increase)
    (global-set-key (kbd "C--") 'text-scale-decrease)
	(global-set-key (kbd "C-0") 'text-scale-set)
    (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
    (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

#+RESULTS:
: text-scale-decrease

** Modeline
Replace the default modeline with a pretier more useful.
#+begin_src emacs-lisp
    (use-package doom-modeline
      :init (doom-modeline-mode 1)
      :config
      (setq doom-modeline-height 25      ;; sets modeline height
            doom-modeline-bar-width 5    ;; sets right bar width
            doom-modeline-persp-name t   ;; adds perspective name to modeline
            doom-modeline-persp-icon t)) ;; adds folder icon next to persp name
#+end_src

** Dashboard 

#+begin_src emacs-lisp
(use-package dashboard
    :init      ;; tweak dashboard config before loading it
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-init-info t)
    ;;(setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
    ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
    (setq dashboard-startup-banner "~/.emacs.d/emacs-dash.png")  ;; use custom image as banner
    (setq dashboard-center-content nil) ;; set to 't' for centered content
    (setq dashboard-set-footer nil)
    (setq dashboard-items '((recents . 5)
                            (agenda . 5 )
                            (bookmarks . 3)
                            (projects . 3)
                            (registers . 3)))
  :config
  (dashboard-setup-startup-hook)
  (dashboard-modify-heading-icons '((recents . "file-text")
            (bookmarks . "book"))))
#+end_src

** Dashboard in Emacsclient
This setting ensures that emacsclient always opens on *dashboard* rather than *scratch*.

#+begin_src emacs-lisp
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src

* Custom functions

** Transparency for overlay editing

Does not work for nixos, so disabled.
#+begin_src emacs-lisp
        ;;    (defun toggle-transparency ()
        ;;   (interactive)
        ;;   (let ((alpha (frame-parameter nil 'alpha)))
        ;;     (set-frame-parameter
        ;;      nil 'alpha
        ;;      (if (eql (cond ((numberp alpha) alpha)
        ;;                     ((numberp (cdr alpha)) (cdr alpha))
        ;;                     ;; Also handle undocumented (<active> <inactive>) form.
        ;;                     ((numberp (cadr alpha)) (cadr alpha)))
        ;;               100)
        ;;          '(85 . 50) '(100 . 100)))))
        ;; (global-set-key (kbd "<f9>") 'toggle-transparency)

;;         (defvar my-display-transparency nil)
;;         (defun my-toggle-transparency ()
;;           (interactive)
;;           (if (eq my-display-transparency nil)
;;             (progn
;;               (set-frame-parameter nil 'alpha-background 50)
;;               (set-frame-parameter nil 'alpha 50)
;;                             (setq my-display-transparency 't))
;;             (progn
;;                     (set-frame-parameter nil 'alpha-background 100)
;;                     (set-frame-parameter nil 'alpha 100)
;;             (message "%s" my-display-transparency)
;;             (setq my-display-transparency nil))))
;;
;;         (global-set-key (kbd "<f9>") 'my-toggle-transparency)
;;
;;(set-frame-parameter (selected-frame) 'alpha-background 40)
;;(add-to-list 'default-frame-alist '(alpha-background . 40))
#+end_src

* Org

** Org-mode

#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure t
  :defer t
  :config
  (define-key org-mode-map
    (kbd "RET") 'org-return-indent)
  (evil-define-key 'normal org-mode-map
    (kbd "TAB") 'org-cycle)
  :custom
  (org-export-with-drawers nil)
  (org-expert-with-todo-keywords nil)
  (org-export-with-broken-links t)
  (org-export-with-toc nil)
  (org-export-with-smart-quotes t))
#+END_SRC

** Default file actions

#+BEGIN_SRC emacs-lisp
(setq org-file-apps
  (quote
    ((auto-mode . emacs)
    ("\\.x?html?\\'" . "/etc/profiles/per-user/jacob/bin/vivaldi %s"))))
#+END_SRC

** Org definitions

#+BEGIN_SRC emacs-lisp
(setq-default org-startup-indented t
      org-pretty-entities t
      org-use-sub-superscripts "{}"
      org-hide-emphasis-markers t
      org-startup-with-inline-images t
      org-image-actual-width '(800))


(add-hook 'org-mode-hook
  (lambda ()
    (visual-line-mode 1)))
(setq org-directory "~/Documents/org"
  org-default-notes-file (expand-file-name "inbox.org" org-directory)
  org-ellipsis " ▼ "
  org-log-done 'time
  org-journal-dir "~/Documents/org/journal/"
  org-journal-date-format "%B %d, %Y (%A) "
  org-journal-file-format "%Y-%m-%d.org"
  org-hide-emphasis-markers t)
(setq org-src-preserve-indentation nil
  org-src-tab-acts-natively t
  org-edit-src-content-indentation 0
  org-adapt-indentation t)

(setq org-image-actual-width 800)
#+END_SRC

** Auto update images

#+BEGIN_SRC emacs-lisp
(add-hook 'org-babel-after-execute-hook
          (lambda ()
            (when org-inline-image-overlays
              (org-redisplay-inline-images))))
#+END_SRC

** Agenda

#+BEGIN_SRC emacs-lisp

;; start with Monday as first day of the week
(setq calendar-week-start-day 1)
;;
;;(nvmap :prefix "SPC"
;;    "a" 'org-agenda)
#+END_SRC

#+RESULTS:

** Alerts / Notifications

Shows D-Bus reminders for org files. To blacklist items, add a "PERSONAL" tag.

    #+BEGIN_SRC emacs-lisp
    ;;    (use-package org-alert
    ;;  :ensure t
    ;;  :custom (alert-default-style 'notifications)
    ;;  :config
    ;;  (setq org-alert-interval 300
    ;;    org-alert-notification-title "Org Alert Reminders!")
    ;;  (org-alert-enable))

    ;; More advanced package org-wild-notifier
    (use-package org-wild-notifier
            :ensure t
            :custom
            (alert-default-style 'notifications)
            (org-wild-notifier-alert-time '(1 15 30))
            (org-wild-notifier-keyword-whitelist nil)
            (org-wild-notifier-tags-blacklist '("PERSONAL"))
            (org-wild-notifier-notification-title "Org Reminder!")
            :config
            (org-wild-notifier-mode 1))
    #+END_SRC

** Enabling Table of Contents
#+begin_src emacs-lisp
    (use-package toc-org
      :commands toc-org-enable
      :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enabling Org Bullets
Org-bullets gives us attractive bullets rather than asterisks.
#+begin_src emacs-lisp
    (add-hook 'org-mode-hook 'org-indent-mode)
    (use-package org-bullets)
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Source Code Block Tag Expansion
Org-tempo is not a separate package but a module within org that can be enabled.
Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.
#+begin_src emacs-lisp
    (with-eval-after-load 'org
      (require 'org-tempo))
#+end_src

** Org Roam

TODO: Create table with commands

| COMMAND                            | DESCRIPTION       | KEYBINDING |
|------------------------------------+-------------------+------------|
| org-roam-buffer-toggle             | Toggle buffer     | SPC r t    |
| org-roam-node-find                 | Find node         | SPC r f    |
| org-roam-node-insert               | Insert node       | SPC r i    |
| org-roam-dailies-capture-today     | Capture today     | SPC r j t  |
| org-roam-dailies-goto-today        | View today        | SPC r v t  |
| org-roam-dailies-capture-yesterday | Capture yesterday | SPC r j y  |
| org-roam-dailies-goto-yesterday    | View yesterday    | SPC r v y  |
| org-roam-dailies-capture-tomorrow  | Capture tomorrow  | SPC r j m  |
| org-roam-dailies-goto-tomorrow     | View tomorrow     | SPC r v m  |

#+BEGIN_SRC emacs-lisp
(use-package org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory "~/Documents/org/RoamNotes")
  (org-roam-completion-everywhere t)
  (org-roam-capture-templates
   '(("d" "default" plain
      "%?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n")
      :unnarrowed t)
     ("n" "notes" plain
      "\n%?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n")
      :unnarrowed t)))
  :config
  (org-roam-db-autosync-mode))

(setq org-roam-dailies-capture-templates
	  '(
		("d" "Journal" entry "* %?"
		 :if-new (file+head+olp "%<%Y-%m-%d>.org"
								"#+title: %<%Y-%m-%d>\n#+filetags: %<:%Y:%B:>\n"
								("Journal")))
		("m" "Meeting" entry "* MEETING %? %U\nWith: \n"
		 :if-new (file+head+olp "%<%Y-%m-%d>.org"
								"#+title: %<%Y-%m-%d>\n#+filetags: %<%Y:%B:>\n"
								("Meeting")))
		("n" "Note" entry "* NOTE %? %U\n"
		 :if-new (file+head+olp "%<%Y-%m-%d>.org"
								"#+title: %<%Y-%m-%d>\n#+filetags: %<:%Y:%B:>\n"
								("Note")))
		("s" "Standup" entry "* STANDUP %U\n  Team: %?\n\n*** Yesterday\n\n*** Today\n\n*** Impediments\n\n"
		 :if-new (file+head+olp "%<%Y-%m-%d>.org"
								"#+title: %<%Y-%m-%d>\n#+filetags: %<%Y:%B:>\n"
								("Standup")))
		("t" "To do" entry "* TODO %?"
		 :if-new (file+head+olp "%<%Y-%m-%d>.org"
								"#+title: %<%Y-%m-%d>\n#+filetags: %<:%Y:%B:>\n"
								("To do")))))
#+END_SRC

* Other packages

** Blogging with Hugo

#+begin_src emacs-lisp
;; Github Flavored Markdown exporter for org mode
(use-package ox-gfm
  :ensure t
  :after org
  :config
  (eval-after-load "org"
    '(require 'ox-gfm nil t)))

(use-package ox-hugo
  :ensure t
  :after ox)
#+end_src

#+RESULTS:

** Magit
Complete text-based user interface to Git.
#+begin_src emacs-lisp
    (use-package magit
      :commands magit-status)
#+end_src

** Projectile
Projectile is a project interaction library for Emacs.
#+begin_src emacs-lisp
    (use-package projectile
      :config
      (projectile-mode 1)
      :init
      (setq projectile-switch-project-action #'projectile-dired)
      (setq projectile-project-search-path '(("~/Projects/github" . 1) ("~/Projects/Spielerei" . 1) ("~/Projects/work" . 1)))) ;; . 1 means only search first subdirectory level for projects
    ;; Use Bookmarks for non git projects
#+end_src

** Company
Company is a text completion framework for Emacs. The name stands for “complete anything”.
Completion will start automatically after you type a few letters.
Use M-n and M-p to select, <tab> to complete.
#+begin_src emacs-lisp
    (use-package company
      :defer 2
      :diminish
      :bind (:map company-active-map
                  ("<tab>" . company-complete-selection)) ;; You can delete the :bind region to use return (default)
      :custom
      (company-begin-commands '(self-insert-command))
      (company-idle-delay 0.0)
      (company-minimum-prefix-length 1)
      (company-show-numbers t)
      (company-tooltip-align-annotations 't)
      (global-company-mode t))

    (use-package company-box
      :after compan
      :diminish
      :hook (company-mode . company-box-mode))
#+end_src

** Ivy (counsel)
Ivy, a generic completion mechanism for Emacs.
Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
Ivy-rich allows us to add descriptions alongside the commands in M-x.
#+begin_src emacs-lisp
    (use-package counsel
      :after ivy
      :diminish
      :config (counsel-mode))

    (use-package ivy
      :bind
      ;; ivy-resume resumes the last Ivy-based completion.
      (("C-c C-r" . ivy-resume)
       ("C-x B" . ivy-switch-buffer-other-window))
      :diminish
      :custom
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "(%d/%d) ")
      (setq enable-recursive-minibuffers t)
      :config
      (ivy-mode))

    (use-package nerd-icons-ivy-rich
      :init
      (nerd-icons-ivy-rich-mode 1)
      (ivy-rich-mode 1))

    (use-package ivy-rich
      :after ivy
      :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
      :custom
      (ivy-virtual-abbreviate 'full
                              ivy-rich-switch-buffer-align-virtual-buffer t
                              ivy-rich-path-style 'abbrev)
      :config
      (ivy-set-display-transformer 'ivy-switch-buffer
                                   'ivy-rich-switch-buffer-transformer))
    (use-package counsel-projectile
      :config (counsel-projectile-mode))
#+end_src

** DIMINISH
This package implements hiding or abbreviation of the modeline displays (lighters) of minor-modes.
With this package installed, you can add ‘:diminish’ to any use-package block to hide that particular mode in the modeline.
#+begin_src emacs-lisp
    (use-package diminish)
#+end_src

** WHICH-KEY
Which-key is a helper utility for keychords (which key to press)
#+begin_src emacs-lisp
    (use-package which-key
      :init
      (which-key-mode 1)
      :diminish
      :config
      (setq which-key-side-window-location 'bottom
            which-key-sort-order #'which-key-key-order-alpha
            which-key-sort-uppercase-first nil
            which-key-add-column-padding 1
            which-key-max-display-columns nil
            which-key-min-display-lines 6
            which-key-side-window-slot -10
            which-key-side-window-max-height 0.25
            which-key-idle-delay 0.8
            which-key-max-description-length 25
            which-key-allow-imprecise-window-fit nil
            which-key-separator " → " ))
#+end_src

** Nix mode

#+begin_src emacs-lisp
(use-package nix-mode
    :mode "\\.nix\\'")
#+end_src

** PlantUML

#+begin_src emacs-lisp
(use-package plantuml-mode
  :ensure t
  :config
  (setq plantuml-jar-path "/nix/store/bmq93dqb6a9w7ip0qms7gzijbrajrsrp-plantuml-1.2023.10/lib/plantuml.jar")
  (setq org-plantuml-jar-path "/nix/store/bmq93dqb6a9w7ip0qms7gzijbrajrsrp-plantuml-1.2023.10/lib/plantuml.jar")
  (setq plantuml-default-exec-mode 'jar)
    (setq plantuml-executable-path "/etc/profiles/per-user/jacob/bin/plantuml")
  (setq plantuml-default-exec-mode 'executable)

  (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
  (add-to-list 'auto-mode-alist '("\\.pu\\'" . plantuml-mode))
  (add-to-list 'auto-mode-alist '("\\.puml\\'" . plantuml-mode))
  (setq plantuml-output-type "png"))
  (org-babel-do-load-languages 'org-babel-load-languages '((plantuml .t)))
  (with-eval-after-load 'ox-hugo
    (add-to-list 'org-hugo-special-block-type-properties '("mermaid" . (:raw t))))
#+end_src

** Gherkin

#+begin_src emacs-lisp
(require 'feature-mode)
(add-to-list 'auto-mode-alist '("\.feature$" . feature-mode))
#+end_src

** YASnippet

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :config
  (setq yas-snippet-dirs '("~/Documents/org/yasnippets"))
  (yas-global-mode 1))
#+END_SRC

** Spell checking

 Usage:
 * Use f10 to set dictionary, german or english.
 * Press f12 to check spelling in the buffer.
 * Press f11 to go to the next spelling error, ispell shows corrections that can be chosen. If not needed skip with SPC.

#+BEGIN_SRC emacs-lisp

(global-set-key (kbd "<f12>") 'flyspell-buffer)
(global-set-key (kbd "<f11>") 'flyspell-check-next-highlighted-word)
(global-set-key (kbd "<f10>") 'fd-switch-dictionary)

(setq ispell-program-name "aspell")
;;(setq ispell-local-dictionary "nl")
;;(setq ispell-current-dictionary "nl")

(defun fd-switch-dictionary()
(interactive)
(let* ((dic ispell-current-dictionary)
        (change (if (string= dic "nl") "english" "nl")))
    (ispell-change-dictionary change)
    (message "Dictionary switched from %s to %s" dic change)))

(defun flyspell-check-next-highlighted-word ()
"Custom function to spell check next highlighted word"
(interactive)
(flyspell-goto-next-error)
(ispell-word))

#+END_SRC

** Runtime Performance
Dial the GC threshold back down so that garbage collection happens more frequently but in less time. We also increase Read Process Output Max so emacs can read more data.
#+begin_src emacs-lisp
    ;; Make gc pauses faster by decreasing the threshold.
    (setq gc-cons-threshold (* 2 1000 1000))
    ;; Increase the amount of data which Emacs reads from the process
    (setq read-process-output-max (* 1024 1024)) ;; 1mb
#+end_src

** Commenting lines

#+BEGIN_SRC emacs-lisp
(use-package evil-nerd-commenter
  :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+END_SRC

** Webjump

#+begin_src emacs-lisp
(use-package webjump
  :defer
  :ensure nil
  :bind ("C-x /" . webjump)
  :config
  (setq webjump-sites '(
						("Google" . [simple-query "google.com" "google.com/search?q=" ""])
						("GitHub" . [simple-query "github.com" "https://github.com/search?q=owner:jacobduijzer " "&type=repository"])
						("YouTube" . [simple-query "youtube.com/feed/subscriptions" "youtube.com/results?search_query=" ""])
)))
#+end_src

#+RESULTS:
: webjump

* Trying out

** Eat (terminal emulation)

Eat(Emulate A Terminal) is a terminal emulator within Emacs.
Its more portable and less overhead for users over like vterm or eshell.
We setup eat with eshell if you want to use bash, zsh etc.. Check out their git [[https://codeberg.org/akib/emacs-eat][repository]] how to do it.
#+begin_src emacs-lisp
(use-package eat
  :hook('eshell-load-hook #'eat-eshell-mode))
#+end_src

