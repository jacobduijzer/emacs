#+TITLE: Emacs Configuration
#+AUTHOR: Jacob Duijzer
#+STARTUP: indent

This is my Emacs configuration. It might not be the best setup and it is a
work in progress. I might update it frequently. Testing123

* Table Of Contents                                                   :TOC_4:
- [[#startup][Startup]]
    - [[#setup-packageel-to-work-with-melpa][Setup Package.el To Work With MELPA]]
  - [[#use-package][Use-package]]
  - [[#backups][Backups]]
  - [[#faster-startup][Faster startup]]
    - [[#garbage-collection][Garbage collection]]
    - [[#native-compile][Native Compile]]
  - [[#keep-emacs-dir-clean][Keep emacs dir clean]]
  - [[#restart-emacs][Restart Emacs]]
  - [[#evil-mode][Evil mode]]
  - [[#general-keybindings][General Keybindings]]
  - [[#custom-functions][Custom functions]]
    - [[#determine-os-type][Determine OS type]]
    - [[#auto-resize-emacs][Auto resize emacs]]
    - [[#set-emacs-position-on-screen][Set emacs' position on screen]]
    - [[#resize-and-screen-location-keybindings][Resize and screen-location keybindings]]
    - [[#splits-and-window-controls][Splits and window controls]]
    - [[#distraction-free-modes][Distraction Free modes]]
  - [[#dashboard][Dashboard]]
    - [[#configuring-dashboard][Configuring Dashboard]]
    - [[#dashboard-in-emacsclient][Dashboard in Emacsclient]]
- [[#configuration-layout-theme-fonts][Configuration, Layout, theme, fonts]]
  - [[#general-configuration][General configuration]]
  - [[#modeline][Modeline]]
  - [[#all-the-icons][All the icons]]
  - [[#fonts][Fonts]]
  - [[#theme][Theme]]
  - [[#fringe][Fringe]]
  - [[#transparency-for-overlay-editing][Transparency (for overlay editing)]]
- [[#editing][Editing]]
  - [[#code-formatting][Code formatting]]
  - [[#commenting-lines][Commenting lines]]
  - [[#frame-scaling--zooming][Frame scaling / zooming]]
  - [[#line-numbers][Line numbers]]
  - [[#markdown][Markdown]]
- [[#etc][Etc]]
  - [[#ivy][Ivy]]
  - [[#vertico][Vertico]]
  - [[#vterm][VTerm]]
  - [[#projectile][Projectile]]
  - [[#file-manager-dired][File manager (Dired)]]
  - [[#keybindings-to-open-dired][Keybindings To Open Dired]]
  - [[#keybindings-within-dired][Keybindings Within Dired]]
  - [[#keybindings-for-peep-dired-mode][Keybindings For Peep-Dired-Mode]]
  - [[#org-mode][Org mode]]
    - [[#org][Org]]
    - [[#default-file-actions][Default file actions]]
    - [[#org-definitions][Org definitions]]
    - [[#agenda][Agenda]]
    - [[#alerts--notifications][Alerts / Notifications]]
    - [[#spell-checking][Spell checking]]
    - [[#habit][Habit]]
    - [[#source-code-block-syntax-highlighting][Source Code Block Syntax Highlighting]]
    - [[#bullets][Bullets]]
    - [[#automatically-create-toc][Automatically create TOC]]
    - [[#yasnippet][YASnippet]]
    - [[#auto-update-images][Auto update images]]
    - [[#screenshot-to-org][Screenshot to org]]
    - [[#org-latex-pdf][Org Latex Pdf]]
  - [[#org-capture--refile][Org Capture & refile]]
  - [[#org-roam][Org Roam]]
  - [[#deadgrep-full-text-search-for-org-roam][Deadgrep (full-text search for org-roam?)]]
  - [[#which-key][Which key]]
  - [[#nix][Nix]]
  - [[#pdf-viewer][PDF Viewer]]
- [[#other-applications][Other applications]]
  - [[#blogging-with-hugo][Blogging with Hugo]]
  - [[#plantuml][PlantUML]]
  - [[#mermaid][Mermaid]]
  - [[#rust][Rust]]
  - [[#magit][Magit]]
  - [[#gherkin][Gherkin]]
  - [[#spielerei][Spielerei]]

* Startup
To make sure everything loads correctly, we start with some basic setup.

*** Setup Package.el To Work With MELPA

#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
;;(package-refresh-contents)
;;(package-initialize)
#+END_SRC

** Use-package
Install use-package and enable ‘:ensure t’ globally.  The ‘:ensure’ keyword causes the package(s) within use-package statements to be installed automatically if not already present on your system.  To avoid having to add ‘:ensure t’ to every use-package statement in this config, I set ‘use-package-always-ensure’.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(setq use-package-always-ensure t)
#+END_SRC

** Backups

#+BEGIN_SRC emacs-lisp
(setq auto-save-default t)
(setq make-backup-files t)
(setq auto-save-list-file-prefix nil)
(setq backup-directory-alist
    `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
    `((".*" ,temporary-file-directory t)))
#+END_SRC

** Faster startup
This section is where it make emacs faster to load.

*** Garbage collection
Makes startup faster by reducing the frequency of garbage collection

TODO: find out why gcmh stopped working.
#+begin_src emacs-lisp
;; Using garbage magic hack.
 ;;(use-package gcmh
 ;;  :config
 ;;  (gcmh-mode 1))
;; Setting garbage collection threshold
(setq gc-cons-threshold 402653184
      gc-cons-percentage 0.6)

;; Profile emacs startup
(add-hook 'emacs-startup-hook
	(lambda () (interactive)
		(my/frame-resize)
		(my/frame-move 0.5 0.5)))
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

;; Silence compiler warnings as they can be pretty disruptive (setq comp-async-report-warnings-errors nil)
#+end_src

#+RESULTS:
| (lambda nil (interactive) (my/frame-resize) (my/frame-move 0.5 0.5)) | #[0 \301!\210eb\210\302 \210\303\304!\207 [dashboard-buffer-name switch-to-buffer redisplay run-hooks dashboard-after-initialize-hook] 2] | (lambda nil (message *** Emacs loaded in %s with %d garbage collections. (format %.2f seconds (float-time (time-subtract after-init-time before-init-time))) gcs-done)) | (lambda nil (interactive) ((my/frame-resize) (my/frame-move 0.5 0.5))) |

*** Native Compile
#+begin_src emacs-lisp
;; Silence compiler warnings as they can be pretty disruptive
(if (boundp 'comp-deferred-compilation)
    (setq comp-deferred-compilation nil)
    (setq native-comp-deferred-compilation nil))
;; In noninteractive sessions, prioritize non-byte-compiled source files to
;; prevent the use of stale byte-code. Otherwise, it saves us a little IO time
;; to skip the mtime checks on every *.elc file.
(setq load-prefer-newer noninteractive)
#+end_src

** Keep emacs dir clean

#+BEGIN_SRC emacs-lisp
(setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
	url-history-file (expand-file-name "url/history" user-emacs-directory))

(use-package no-littering)

(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
	(load custom-file))
#+END_SRC

** Restart Emacs

#+BEGIN_SRC emacs-lisp
(setq confirm-kill-emacs 'yes-or-no-p)
#+END_SRC

#+RESULTS:
: yes-or-no-p

** Evil mode
Evil is an extensible ‘vi’ layer for Emacs. It emulates the main features of Vim, and provides facilities for writing custom extensions.  Evil Collection is also installed since it adds ‘evil’ bindings to parts of Emacs that the standard Evil package does not cover, such as: calenda, help-mode adn ibuffer.

#+BEGIN_SRC emacs-lisp
(use-package evil
    :init      ;; tweak evil's configuration before loading it
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-respect-visual-line-mode t)
    (evil-mode))

(use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))
#+END_SRC

#+RESULTS:
: t

** General Keybindings
General.el allows us to set keybindings.  As a longtime Doom Emacs user, I have grown accustomed to using SPC as the prefix key.  General makes setting keybindings (especially with SPC) much easier.  All of the keybindings we set later in the config depend on general being loaded.

#+BEGIN_SRC emacs-lisp
(use-package general
  :config
  (general-evil-setup t))
#+END_SRC

** Custom functions
*** Determine OS type

#+BEGIN_SRC emacs-lisp
(defconst on-linux (string-equal system-type "gnu/linux"))
(defconst on-windows (string-equal system-type "windows-nt"))
(defconst on-mac (string-equal system-type "darwin"))

;;(describe-variable on-linux)
#+END_SRC

*** Auto resize emacs

#+BEGIN_SRC emacs-lisp
(defun my/frame-monitor-usable-height (factor &optional frame)
"Return the usable height in pixels of the monitor of FRAME.
FRAME can be a frame name, a terminal name, or a frame.
If FRAME is omitted or nil, use currently selected frame.

Uses the monitor's workarea. See `display-monitor-attributes-list'."
    (cadddr (frame-monitor-workarea frame))
    (truncate (* (cadddr (frame-monitor-workarea frame)) factor)))

(defun my/frame-resize (&optional frame)
    (interactive)
    (set-frame-size (selected-frame) (truncate 1500) (my/frame-monitor-usable-height 0.4) t))
;;(my/resize-and-center)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun my/frame-recenter (&optional frame)
  "Center FRAME on the screen.
FRAME can be a frame name, a terminal name, or a frame.
If FRAME is omitted or nil, use currently selected frame."
  (interactive)
  (unless (eq 'maximised (frame-parameter nil 'fullscreen))
    (modify-frame-parameters
     frame '((user-position . t) (top . 0.5) (left . 0.5)))))

;;(my/frame-recenter)
#+END_SRC
 
*** Set emacs' position on screen

#+BEGIN_SRC emacs-lisp
(defun my/frame-move (left top &optional frame)
    " frame on the screen.
    frame can be a frame name, a terminal name, or a frame.
    if frame is omitted or nil, use currently selected frame."
    (interactive)
    (unless (eq 'maximised (frame-parameter nil 'fullscreen))
	(modify-frame-parameters
	frame `((user-position . t) (top . ,top) (left . ,left)))))

(my/frame-move 0.9 0.9)
#+END_SRC

#+RESULTS:

*** Resize and screen-location keybindings

| COMMAND                | DESCRIPTION                     | KEYBINDING |
|------------------------+---------------------------------+------------|
| my/frame-resize        | /resize emacs do default/         | SPC s n    |
| my/frame-move 0.5 0.5  | /move frame to center/            | SPC s cc   |
| my/frame-move 0.5 0.5  | /move frame to center and resize/ | SPC s cr   |
| my/frame-move 0.98 0.5 | /move frame to right/             | SPC s mr   |
| my/frame-move 0.02 0.5 | /move frame to left/              | SPC s ml   |

#+BEGIN_SRC emacs-lisp
(nvmap :prefix "SPC"
    "s r" '(my/frame-recenter :which-key "Recenter window") 
    "s cc" '((lambda () (interactive) (my/frame-move 0.5 0.5)) :which-key "Center window.")
    "s cr" '((lambda () (interactive) (my/frame-resize) (my/frame-move 0.5 0.5)) :which-key "Center & Resize window.")
    "s mr" '(lambda () (interactive) (my/frame-move 0.98 0.5) :which-key "Move window to the right.")
    "s ml" '(lambda () (interactive) (my/frame-move 0.02 0.5) :which-key "Move window to the left.")
)

;; resize and reload on load
(my/frame-resize)
(my/frame-move 0.5 0.5)

#+END_SRC

#+RESULTS:

*** Splits and window controls

#+begin_src emacs-lisp
(winner-mode 1)
(nvmap :prefix "SPC"
       ;; Window splits
       "w c"   '(evil-window-delete :which-key "Close window")
       "w n"   '(evil-window-new :which-key "New window")
       "w s"   '(evil-window-split :which-key "Horizontal split window")
       "w v"   '(evil-window-vsplit :which-key "Vertical split window")
       ;; Window motions
       "w h"   '(evil-window-left :which-key "Window left")
       "w j"   '(evil-window-down :which-key "Window down")
       "w k"   '(evil-window-up :which-key "Window up")
       "w l"   '(evil-window-right :which-key "Window right")
       "w w"   '(evil-window-next :which-key "Goto next window")
       ;; winner mode
       "w <left>"  '(winner-undo :which-key "Winner undo")
       "w <right>" '(winner-redo :which-key "Winner redo"))
#+end_src

#+RESULTS:

*** Distraction Free modes

#+BEGIN_SRC emacs-lisp
(defun ews-distraction-free ()
    "Distraction-free writing environment using Olivetti package."
    (interactive)
    (if (equal olivetti-mode nil)
        (progn
          (window-configuration-to-register 1)
          (delete-other-windows)
          (text-scale-set 2)
          (olivetti-mode t))
      (progn
        (if (eq (length (window-list)) 1)
            (jump-to-register 1))
        (olivetti-mode 0)
        (text-scale-set 0))))

  (use-package olivetti
    :demand t
    :bind
    (("<f9>" . ews-distraction-free)))
#+END_SRC

#+RESULTS:
: ews-distraction-free

** Dashboard

Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.

*** Configuring Dashboard

#+begin_src emacs-lisp
(use-package dashboard
    :init      ;; tweak dashboard config before loading it
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-init-info t)
    ;;(setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
    ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
    (setq dashboard-startup-banner "~/.emacs.d/emacs-dash.png")  ;; use custom image as banner
    (setq dashboard-center-content nil) ;; set to 't' for centered content
    (setq dashboard-set-footer nil)
    (setq dashboard-items '((recents . 5)
                            (agenda . 5 )
                            (bookmarks . 3)
                            (projects . 3)
                            (registers . 3)))
  :config
  (dashboard-setup-startup-hook)
  (dashboard-modify-heading-icons '((recents . "file-text")
			      (bookmarks . "book"))))
#+end_src

*** Dashboard in Emacsclient
This setting ensures that emacsclient always opens on *dashboard* rather than *scratch*.

#+begin_src emacs-lisp
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src

* Configuration, Layout, theme, fonts
** General configuration

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(blink-cursor-mode -1)
(modify-all-frames-parameters '((internal-border-width . 50)))
(setq scroll-conservatively 101) ;; value greater than 100 gets rid of half page jumping
(setq mouse-wheel-scroll-amount '(3 ((shift) . 3))) ;; how many lines at a time
(setq mouse-wheel-progressive-speed t) ;; accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
(setq visible-bell t)
(setq ring-bell-function 'ignore)
(setq-default line-spacing 2)

(add-hook 'text-mode-hook 'visual-line-mode) ;; line wrap for all text files
#+END_SRC

#+RESULTS:
| visual-line-mode | text-mode-hook-identify |

** Modeline

TODO: change to a better, more functional mood line? Configuration?

#+BEGIN_SRC emacs-lisp
(use-package mood-line
    :config (mood-line-mode))
#+END_SRC

** All the icons

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)
#+END_SRC

** Fonts
#+BEGIN_SRC emacs-lisp
(defvar my/default-font-size 140)
(when on-linux
    (set-face-attribute 'default nil :font "JetBrainsMono Nerd Font" :height my/default-font-size))
(when on-windows
    (set-face-attribute 'default nil :font "JetBrainsMONO NF" :height my/default-font-size))
#+END_SRC

#+RESULTS:

** Theme

Using modus-themes (https://protesilaos.com/emacs/modus-themes).

#+BEGIN_SRC emacs-lisp
(use-package modus-themes
    :ensure
    :init
    (setq	modus-themes-italic-constructs t
            modus-themes-bold-constructs t
		modus-themes-mixed-fonts t
		modus-themes-headings '((1 . (1.5))
					(2 . (1.3))
					(t . (1.1)))
            modus-themes-region '(bg-only no-extend))
    :config
    ;;(modus-themes-load-vivendi)             ; Dark theme
    :bind ("<f5>" . modus-themes-toggle))
(load-theme 'modus-vivendi :no-confirm)

(setq modus-themes-common-palette-overrides
	'((fringe unspecified)))
#+END_SRC

#+RESULTS:
| fringe | unspecified |

** Fringe

#+BEGIN_SRC emacs-lisp
;;;(fringe :inherit default)
(set-face-attribute 'fringe nil :background nil)
#+END_SRC

** Transparency (for overlay editing)

#+BEGIN_SRC emacs-lisp
(defvar my-display-transparency nil)
(defun my-toggle-transparency ()
	(interactive)
	(if (eq my-display-transparency nil)
		(progn
			(set-frame-parameter nil 'alpha-background 50)
			(set-frame-parameter nil 'alpha 50)
                    (setq my-display-transparency 't))
	  (progn
            (set-frame-parameter nil 'alpha-background 100)
            (set-frame-parameter nil 'alpha 100)
		(message "%s" my-display-transparency)
		(setq my-display-transparency nil))))

(global-set-key (kbd "<f9>") 'my-toggle-transparency)
#+END_SRC

#+RESULTS:
: my-toggle-transparency

* Editing
** Code formatting

#+BEGIN_SRC emacs-lisp
(use-package format-all)

(nvmap :prefix "SPC"
	"f a" 'format-all-buffer)

(add-hook 'prog-mode-hook #'format-all-ensure-formatter)
#+END_SRC

** Commenting lines

#+BEGIN_SRC emacs-lisp
(use-package evil-nerd-commenter
	:bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+END_SRC

#+RESULTS:
: evilnc-comment-or-uncomment-lines

** Frame scaling / zooming

#+BEGIN_SRC emacs-lisp
(use-package default-text-scale
	:defer 1
	:config
	(default-text-scale-mode))
(global-set-key (kbd "C-M-+") 'default-text-scale-increase)
(global-set-key (kbd "C-M--") 'default-text-scale-decrease) 
(global-set-key (kbd "C-M-0") 'default-text-scale-reset)
#+END_SRC

** Line numbers

| COMMAND                   | DESCRIPTION             | KEYBINDING |
|---------------------------+-------------------------+------------|
| cc/toggle-line-numbering  | /Toggle line number mode/ | SPC l t    |
| display-line-numbers-mode | /Diplay line numbers/     | SPC l d    |

#+BEGIN_SRC emacs-lisp
(defun cc/toggle-line-numbering ()
    "Toggle line numbering between absolute and relative."
    (interactive)
    (if (eq display-line-numbers 'relative)
        (setq display-line-numbers t)
      (setq display-line-numbers 'relative)))

(nvmap :prefix "SPC"
	"l t" '(cc/toggle-line-numbering :which-key "Toggle line numbering.")
	"l d" 'display-line-numbers-mode :which-key "Display line numbers.")
#+END_SRC

** Markdown

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
	:ensure t
	:mode ("\\.md" . gfm-mode)
	:init (setq markdown-command "multimarkdown"))
#+END_SRC

* Etc
** Ivy

#+BEGIN_SRC emacs-lisp
(use-package counsel
    :after ivy
    :config (counsel-mode))

(use-package ivy
    :defer 0.1
    :diminish
    :custom
    (setq ivy-count-format "(%d/%d) ")
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    :config
    (ivy-mode))

(nvmap :prefix "SPC"
    "b" 'ivy-switch-buffer :which-key "Ivy switch buffer")

#+END_SRC

#+RESULTS:

** Vertico

#+BEGIN_SRC emacs-lisp
;;(use-package vertico
;;  :ensure
;;  :init
;;  (vertico-mode)

  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  ;; (setq vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  ;; (setq vertico-cycle t)
  ;;)
#+END_SRC

#+RESULTS:

** VTerm

#+BEGIN_SRC emacs-lisp
;;;(use-package vterm)
#+END_SRC

** Projectile

#+BEGIN_SRC emacs-lisp
  (use-package projectile
	:diminish projectile-mode
	:config (projectile-mode)
	:custom ((projectile-completion-system 'ivy))
	:init
	(setq projectile-project-search-path '("~/Projects/"))
	(setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
	:config (counsel-projectile-mode))

  (nvmap :prefix "SPC"
            "p" 'projectile-command-map)

#+END_SRC

** File manager (Dired)

Dired is the file manager within Emacs.  Below, I setup keybindings for image previews (peep-dired).  I've chosen the format of 'SPC d' plus 'key'.

** Keybindings To Open Dired
| COMMAND    | DESCRIPTION                        | KEYBINDING |
|------------+------------------------------------+------------|
| dired      | /Open dired file manager/            | SPC d d    |
| dired-jump | /Jump to current directory in dired/ | SPC d j    |

** Keybindings Within Dired
| COMMAND            | DESCRIPTION                                 | KEYBINDING |
|--------------------+---------------------------------------------+------------|
| dired-view-file    | /View file in dired/                          | SPC d v    |
| dired-up-directory | /Go up in directory tree/                     | h          |
| dired-find-file    | /Go down in directory tree (or open if file)/ | l          |

** Keybindings For Peep-Dired-Mode
| COMMAND              | DESCRIPTION                              | KEYBINDING |
|----------------------+------------------------------------------+------------|
| peep-dired           | /Toggle previews within dired/             | SPC d p    |
| peep-dired-next-file | /Move to next file in peep-dired-mode/     | j          |
| peep-dired-prev-file | /Move to previous file in peep-dired-mode/ | k          |

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons-dired)
(use-package dired-open)
(use-package peep-dired)

(nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
               "d d" '(dired :which-key "Open dired")
               "d j" '(dired-jump :which-key "Dired jump to current")
               "d p" '(peep-dired :which-key "Peep-dired"))

(with-eval-after-load 'dired
  ;;(define-key dired-mode-map (kbd "M-p") 'peep-dired)
  (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
  (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
  (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
  (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file))

(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
;; Get file icons in dired
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
;; With dired-open plugin, you can launch external programs for certain extensions
;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
(setq dired-open-extensions '(("gif" . "sxiv")
                              ("jpg" . "sxiv")
                              ("png" . "sxiv")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")))
#+END_SRC

#+RESULTS:
: ((gif . sxiv) (jpg . sxiv) (png . sxiv) (mkv . mpv) (mp4 . mpv))

** Org mode

*** Org

#+BEGIN_SRC emacs-lisp
(use-package org
	:ensure t
	:defer t
	:config
	(define-key org-mode-map
		(kbd "RET") 'org-return-indent)
	(evil-define-key 'normal org-mode-map
		(kbd "TAB") 'org-cycle)
  :custom
	(org-export-with-drawers nil)
	(org-expert-with-todo-keywords nil)
	(org-export-with-broken-links t)
	(org-export-with-toc nil)
	(org-export-with-smart-quotes t))
#+END_SRC

#+RESULTS:
: t

*** Default file actions

#+BEGIN_SRC emacs-lisp
(setq org-file-apps
	(quote
		((auto-mode . emacs)
		("\\.x?html?\\'" . "/etc/profiles/per-user/jacob/bin/vivaldi %s"))))
#+END_SRC

*** Org definitions

#+BEGIN_SRC emacs-lisp
(setq-default org-startup-indented t
			org-pretty-entities t
			org-use-sub-superscripts "{}"
			org-hide-emphasis-markers t
			org-startup-with-inline-images t
			org-image-actual-width '(600))


(add-hook 'org-mode-hook
	(lambda ()
		(visual-line-mode 1)))
(setq	org-directory "~/Documents/org"
	org-default-notes-file (expand-file-name "inbox.org" org-directory)
	org-ellipsis " ▼ "
	org-log-done 'time
	org-journal-dir "~/Documents/org/journal/"
	org-journal-date-format "%B %d, %Y (%A) "
	org-journal-file-format "%Y-%m-%d.org"
	org-hide-emphasis-markers t)
(setq org-src-preserve-indentation nil
	org-src-tab-acts-natively t
	org-edit-src-content-indentation 0
	org-adapt-indentation t)

(setq org-image-actual-width 400)
#+END_SRC

#+RESULTS:
: 400

*** Agenda

#+BEGIN_SRC emacs-lisp

;; start with Monday as first day of the week
(setq calendar-week-start-day 1)

(nvmap :prefix "SPC"
    "a" 'org-agenda)
#+END_SRC

#+RESULTS:

*** Alerts / Notifications

Shows D-Bus reminders for org files. To blacklist items, add a "PERSONAL" tag.

    #+BEGIN_SRC emacs-lisp
    ;;    (use-package org-alert
    ;;	:ensure t
    ;;	:custom (alert-default-style 'notifications)
    ;;	:config
    ;;	(setq	org-alert-interval 300
    ;;		org-alert-notification-title "Org Alert Reminders!")
    ;;	(org-alert-enable))

    ;; More advanced package org-wild-notifier
    (use-package org-wild-notifier
            :ensure t
            :custom
            (alert-default-style 'notifications)
            (org-wild-notifier-alert-time '(1 15 30))
            (org-wild-notifier-keyword-whitelist nil)
            (org-wild-notifier-tags-blacklist '("PERSONAL"))
            (org-wild-notifier-notification-title "Org Reminder!")
            :config
            (org-wild-notifier-mode 1))
    #+END_SRC
   
*** Spell checking

 Usage:
 * Use f10 to set dictionary, german or english.
 * Press f12 to check spelling in the buffer.
 * Press f11 to go to the next spelling error, ispell shows corrections that can be chosen. If not needed skip with SPC.

#+BEGIN_SRC emacs-lisp

(global-set-key (kbd "<f12>") 'flyspell-buffer)
(global-set-key (kbd "<f11>") 'flyspell-check-next-highlighted-word)
(global-set-key (kbd "<f10>") 'fd-switch-dictionary)

(setq ispell-program-name "aspell")
;;(setq ispell-local-dictionary "nl")
;;(setq ispell-current-dictionary "nl")

(defun fd-switch-dictionary()
(interactive)
(let* ((dic ispell-current-dictionary)
        (change (if (string= dic "nl") "english" "nl")))
    (ispell-change-dictionary change)
    (message "Dictionary switched from %s to %s" dic change)))

(defun flyspell-check-next-highlighted-word ()
"Custom function to spell check next highlighted word"
(interactive)
(flyspell-goto-next-error)
(ispell-word))

#+END_SRC

#+RESULTS:
: flyspell-check-next-highlighted-word

,#+BEGIN_SRC emacs-lisp
;;(dolist (hook '(text-mode-hook))
;;  (add-hook hook (lambda () (flyspell-mode 1))))
#+END_SRC

*** Habit

TODO: find out that habit does. Seems cool, but need more details.

#+BEGIN_SRC emacs-lisp
(require 'org-habit)
(add-to-list 'org-modules 'org-habit)
(setq org-habit-graph-column 60)
#+END_SRC

*** Source Code Block Syntax Highlighting

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t
    org-src-tab-acts-natively t
    org-confirm-babel-evaluate nil)
#+END_SRC

*** Bullets

#+BEGIN_SRC emacs-lisp
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC

*** Automatically create TOC

#+BEGIN_SRC emacs-lisp
(use-package toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+END_SRC

#+RESULTS:
| #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | toc-org-enable | (lambda nil (org-bullets-mode 1)) | (lambda nil (visual-line-mode 1)) | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

*** YASnippet

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
	:config
	(setq yas-snippet-dirs '("~/Documents/org/yasnippets"))
	(yas-global-mode 1))
#+END_SRC

#+RESULTS:
: t

*** Auto update images

#+BEGIN_SRC emacs-lisp
(add-hook 'org-babel-after-execute-hook
          (lambda ()
            (when org-inline-image-overlays
              (org-redisplay-inline-images))))
#+END_SRC

#+RESULTS:
| lambda | nil | (when org-inline-image-overlays (org-redisplay-inline-images)) |

*** Screenshot to org

Taking a screenshot with flameshot, directly from emacs. The screenshot will be placed in the org file.

| COMMAND                   | DESCRIPTION                                | KEYBINDING |
|---------------------------+--------------------------------------------+------------|
| flameshot gui -p filename | Show flameshot, add screenshot to org file | SCP PrtSc  |


#+BEGIN_SRC emacs-lisp
(defun my-org-screenshot (&optional PROMPT RELATIVE_FOLDER)
  "Take a screenshot into a time stamped unique-named file in the
same directory as the org-buffer and insert a link to this file."
  (interactive)
  ;; At the very first, check if the current buffer has a file name. If not, mode needs to be
  ;; PROMPT with DEFAULT_FOLDER
  (if (null (buffer-file-name)) (setq PROMPT t))
  (if (null (buffer-file-name))
      ;; set here the BASE FOLDER in case you call the function from a Capture-Buffer or Agenda-Buffer
    (setq DEFAULT_FOLDER "/home/jacob/Documents/org/screenshots")
    (setq DEFAULT_FOLDER (file-name-directory (buffer-file-name)))
    )
	    
  ;; First, get the filename right. 3 cases to consider, original, fixed relative_folder
  ;; and prompt
  (if
    (and (not PROMPT) (null RELATIVE_FOLDER))
      (setq filename
        (concat
          (buffer-file-name)
	  ;; + screenshot_20230402_143201.png
          (format-time-string "%Y%m%d_%H%M%S_")
          ".png")
	)
    ;; else: either PROMPT is true or RELATIVE_FOLDER is non-nil
    (if PROMPT
	(setq filename
	      (read-file-name "Enter file name (must end in .png): " DEFAULT_FOLDER
			      )
	      )
       (setq filename
        (concat
         (make-temp-name
          (concat
	   ;; Name of resulting file: Directory, where it is called...
	   (file-name-directory buffer-file-name)
	   ;; + folder name "RELATIVE_FOLDER", needs to exist beforehand
           RELATIVE_FOLDER
	   ;; + screenshot_20230402_143201.png
	   "/"
           (format-time-string "%Y%m%d_%H%M%S_")
	   )
	  )
	 ".png")
	)
      )
   )

	(shell-command (concat "flameshot gui -p " filename ))
  (if (file-exists-p filename)
      ;; Checks if the screenshot was created
      (insert
       ;; Inserts the result in the current ORG buffer
       (concat "[[file:" filename "]]"))
      (message "No screenshot was created, aborting."))
  )
       
(nvmap :prefix "SPC"
	"<print>" 'my-org-screenshot)

#+END_SRC

#+RESULTS:

*** Org Latex Pdf

#+BEGIN_SRC emacs-lisp
(require 'ox-latex)
;; Default LaTeX export packages
;;(add-to-list 'org-export-latex-packages-alist '("" "amsmath"))
#+END_SRC

** Org Capture & refile

#+BEGIN_SRC emacs-lisp
(defun load-org-agenda-files-recursively (dir) "Find all directories in DIR."
    (unless (file-directory-p dir) (error "Not a directory `%s'" dir))
    (unless (equal (directory-files dir nil org-agenda-file-regexp t) nil)
        (add-to-list 'org-agenda-files dir))
    (dolist (file (directory-files dir nil nil t))
        (unless (member file '("." ".."))
            (let ((file (concat dir file "/")))
                (when (file-directory-p file)
                    (load-org-agenda-files-recursively file))))))
(load-org-agenda-files-recursively "~/Documents/org/") 

(setq	org-refile-use-cache nil
		org-refile-use-outline-path 'file
		org-refile-allow-creating-parent-nodes (quote confirm)
		org-refile-targets '((org-agenda-files :maxlevel . 4))
            org-outline-path-complete-in-steps nil)

(setq org-capture-templates
        (quote (
                ("t" "Todo" entry (file+datetree org-default-notes-file)
                "* TODO %? %U" :prepend t)
                ("n" "Note" entry (file+datetree org-default-notes-file)
                "* NOTE %? %U" :empty-lines 1 :prepend t)
                ("m" "Meeting" entry (file+datetree org-default-notes-file)
                "* MEETING %? %U\nWith: \n" :empty-lines 1 :prepend t)
                ("s" "Standup" entry (file+datetree org-default-notes-file)
                "* STANDUP %U\n Team: %?\n\n*** Yesterday\n\n*** Today\n\n*** Impediments\n\n" :prepend t :empty-lines 1)
                ("c" "Coaching" entry (file+datetree org-default-notes-file)
                "* COACHING %U\n With: %?\n\n*** 1. KICKOFF: What's on your mind?\n\n*** 2. AWE: ...and what else?\n\n*** 3. FOCUS: What's the real challenge here for you?\n\n*** 4. FOUNDATION: What do you want?\n\n*** 5. LAZY: How can I help?\n\n*** 6. PRIO: If you are saying 'yes' to this, what are you saying 'no' to?\n\n*** 7. LEARNING: What was most useful for you?\n" :prepent t :empty-lines 1)
                )))

(nvmap :prefix "SPC"
    "c" 'org-capture)
#+END_SRC

#+RESULTS:


** Org Roam

TODO: Create table with commands

| COMMAND                            | DESCRIPTION       | KEYBINDING |
|------------------------------------+-------------------+------------|
| org-roam-buffer-toggle             | Toggle buffer     | SPC r t    |
| org-roam-node-find                 | Find node         | SPC r f    |
| org-roam-node-insert               | Insert node       | SPC r i    |
| org-roam-dailies-capture-today     | Capture today     | SPC r j t  |
| org-roam-dailies-goto-today        | View today        | SPC r v t  |
| org-roam-dailies-capture-yesterday | Capture yesterday | SPC r j y  |
| org-roam-dailies-goto-yesterday    | View yesterday    | SPC r v y  |
| org-roam-dailies-capture-tomorrow  | Capture tomorrow  | SPC r j m  |
| org-roam-dailies-goto-tomorrow     | View tomorrow     | SPC r v m  |

#+BEGIN_SRC emacs-lisp
(use-package org-roam
	:ensure t
	:init
	(setq org-roam-v2-ack t)
	:custom
	(org-roam-directory "~/Documents/org/RoamNotes")
    (org-roam-completion-everywhere t)
    (org-roam-capture-templates
    	'(("d" "default" plain
               "%?"
               :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n")
               :unnarrowed t)
		("n" "notes" plain
		"\n%?"
               :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n")
               :unnarrowed t)))
	:config
	(org-roam-db-autosync-mode))

 (nvmap :prefix "SPC"
    "r t" 'org-roam-dailies-capture-today :which-key "Capture Today"
    "r f" 'org-roam-node-find :which-key "Roam find node"
	"r i" 'org-roam-node-insert :which-key "Roam insert node"
	"r j t" 'org-roam-dailies-capture-today :which-key "Journal for today"
	"r v t" 'org-roam-dailies-goto-today :which-key "View journal for today"
    "r j y" 'org-roam-dailies-capture-yesterday :which-key "Journal for yesterday"
	"r v y" 'org-roam-dailies-goto-yesterday :which-key "View journal for yesterday"
    "r j m" 'org-roam-dailies-capture-tomorrow :which-key "Journal for tomorrow"
	"r v m" 'org-roam-dailies-goto-tomorrow :which-key "View journal for tomorrow"
 )

(setq org-roam-dailies-capture-templates
	'(
		("d" "Journal" entry "* %?"
			:if-new (file+head+olp "%<%Y-%m-%d>.org"
	  	  	        "#+title: %<%Y-%m-%d>\n#+filetags: %<:%Y:%B:>\n"
		  	        ("Journal")))
		("m" "Meeting" entry "* MEETING %? %U\nWith: \n"
			:if-new (file+head+olp "%<%Y-%m-%d>.org"
				"#+title: %<%Y-%m-%d>\n#+filetags: %<%Y:%B:>\n"
				("Meeting")))
		("n" "Note" entry "* NOTE %? %U\n"
			:if-new (file+head+olp "%<%Y-%m-%d>.org"
	  	  	        "#+title: %<%Y-%m-%d>\n#+filetags: %<:%Y:%B:>\n"
				("Note")))
		("s" "Standup" entry "* STANDUP %U\n  Team: %?\n\n*** Yesterday\n\n*** Today\n\n*** Impediments\n\n"
			:if-new (file+head+olp "%<%Y-%m-%d>.org"
				"#+title: %<%Y-%m-%d>\n#+filetags: %<%Y:%B:>\n"
				("Standup")))
		("t" "To do" entry "* TODO %?"
			:if-new (file+head+olp "%<%Y-%m-%d>.org"
				"#+title: %<%Y-%m-%d>\n#+filetags: %<:%Y:%B:>\n"
			        ("To do")))))

#+END_SRC

#+RESULTS:
| d | Journal | entry | * %? | :if-new | (file+head+olp %<%Y-%m-%d>.org #+title: %<%Y-%m-%d> |

** Deadgrep (full-text search for org-roam?)

#+BEGIN_SRC emacs-lisp
;;;(use-package deadgrep
;;;	(global-set-key (kbd "<f6>") #'deadgrep))

#+END_SRC

** Which key

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :init
  (setq which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-side-window-slot -10
        which-key-side-window-max-height 0.25
        which-key-idle-delay 0.8
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit t
        which-key-separator " → " ))
(which-key-mode)
#+END_SRC

#+RESULTS:
: t

** Nix

#+BEGIN_SRC emacs-lisp
(use-package nix-mode
  :mode "\\.nix\\'")
#+END_SRC

** PDF Viewer

#+BEGIN_SRC emacs-lisp
;;(use-package org-pdftools)
#+END_SRC

#+RESULTS:
: t

* Other applications

** Blogging with Hugo

#+BEGIN_SRC emacs-lisp
;; Github Flavored Markdown exporter for org mode
(use-package ox-gfm
	:ensure t
	:after org
	:config
	(eval-after-load "org"
		'(require 'ox-gfm nil t)))

(use-package ox-hugo
	:ensure t
	:after ox)
#+END_SRC

** PlantUML

#+BEGIN_SRC emacs-lisp
(use-package plantuml-mode
	:ensure t
	:config
	(setq plantuml-jar-path "/nix/store/bmq93dqb6a9w7ip0qms7gzijbrajrsrp-plantuml-1.2023.10/lib/plantuml.jar")
	(setq org-plantuml-jar-path "/nix/store/bmq93dqb6a9w7ip0qms7gzijbrajrsrp-plantuml-1.2023.10/lib/plantuml.jar")
	(setq plantuml-default-exec-mode 'jar)
    (setq plantuml-executable-path "/etc/profiles/per-user/jacob/bin/plantuml")
	(setq plantuml-default-exec-mode 'executable)
	
	(add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
	(add-to-list 'auto-mode-alist '("\\.pu\\'" . plantuml-mode))
	(add-to-list 'auto-mode-alist '("\\.puml\\'" . plantuml-mode))
	(setq plantuml-output-type "png"))
	(org-babel-do-load-languages 'org-babel-load-languages '((plantuml .t)))
	(with-eval-after-load 'ox-hugo
		(add-to-list 'org-hugo-special-block-type-properties '("mermaid" . (:raw t))))
#+END_SRC

#+RESULTS:
| mermaid | :raw      | t |            |   |
| audio   | :raw      | t |            |   |
| katex   | :raw      | t |            |   |
| mark    | :trim-pre | t | :trim-post | t |
| tikzjax | :raw      | t |            |   |
| video   | :raw      | t |            |   |

** Mermaid

#+BEGIN_SRC emacs-lisp
(use-package ob-mermaid
    :ensure t)

(setq ob-mermaid-cli-path "/usr/bin/mmdc")
#+END_SRC

** Rust

#+BEGIN_SRC emacs-lisp
(require 'rust-mode)
  (add-hook 'rust-mode-hook
    (lambda () (setq indent-tabs-mode nil)))
(setq rust-format-on-save t)
(add-hook 'rust-mode-hook
    (lambda () (prettify-symbols-mode)))
(define-key rust-mode-map (kbd "C-c C-c") 'rust-run)

#+END_SRC

** Magit

The best Git implementation for Emacs.

| COMMAND                   | DESCRIPTION         | KEYBINDING |
|---------------------------+---------------------+------------|
| magit                     | /Show magit/          | SPC g      |

#+BEGIN_SRC emacs-lisp
(use-package magit
    :ensure t)

(nvmap :prefix "SPC"
	"g" 'magit)
#+END_SRC

#+RESULTS:

** Gherkin

#+BEGIN_SRC emacs-lisp
(require 'feature-mode)
(add-to-list 'auto-mode-alist '("\.feature$" . feature-mode))
#+END_SRC

#+RESULTS:
: ((.feature$ . feature-mode) (\.feature\' . feature-mode) (\.puml\' . plantuml-mode) (\.pu\' . plantuml-mode) (\.plantuml\' . plantuml-mode) (\.odc\' . archive-mode) (\.odf\' . archive-mode) (\.odi\' . archive-mode) (\.otp\' . archive-mode) (\.odp\' . archive-mode) (\.otg\' . archive-mode) (\.odg\' . archive-mode) (\.ots\' . archive-mode) (\.ods\' . archive-mode) (\.odm\' . archive-mode) (\.ott\' . archive-mode) (\.odt\' . archive-mode) (/git-rebase-todo\' . git-rebase-mode) (\.\(plantuml\|pum\|plu\)\' . plantuml-mode) (\.rs\' . rust-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Brew\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.m\' . octave-maybe-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.dir-locals\(?:-2\)?\.el\' . lisp-data-mode) (eww-bookmarks\' . lisp-data-mode) (tramp\' . lisp-data-mode) (/archive-contents\' . lisp-data-mode) (places\' . lisp-data-mode) (\.emacs-places\' . lisp-data-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-gmake-mode) (\.make\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-gmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (/PKGBUILD\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\(acinclude\|aclocal\|acsite\)\.m4\' . autoconf-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|squashfs\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\|SQUASHFS\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.js[mx]?\' . javascript-mode) (\.har\' . javascript-mode) (\.json\' . javascript-mode) (\.[ds]?va?h?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (/\.\(authinfo\|netrc\)\' . authinfo-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (/\.redshift\.conf\' . conf-windows-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:asound\|enigma\|fetchmail\|gltron\|gtk\|hxplayer\|mairix\|mbsync\|msmtp\|net\|neverball\|nvidia-settings-\|offlineimap\|qt/.+\|realplayer\|reportbug\|rtorrent\.\|screen\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|mpdconf\|notmuch-config\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.art\' . image-mode) (\.avs\' . image-mode) (\.bmp\' . image-mode) (\.cmyk\' . image-mode) (\.cmyka\' . image-mode) (\.crw\' . image-mode) (\.dcr\' . image-mode) (\.dcx\' . image-mode) (\.dng\' . image-mode) (\.dpx\' . image-mode) (\.fax\' . image-mode) (\.hrz\' . image-mode) (\.icb\' . image-mode) (\.icc\' . image-mode) (\.icm\' . image-mode) (\.ico\' . image-mode) (\.icon\' . image-mode) (\.jbg\' . image-mode) (\.jbig\' . image-mode) (\.jng\' . image-mode) (\.jnx\' . image-mode) (\.miff\' . image-mode) (\.mng\' . image-mode) (\.mvg\' . image-mode) (\.otb\' . image-mode) (\.p7\' . image-mode) (\.pcx\' . image-mode) (\.pdb\' . image-mode) (\.pfa\' . image-mode) (\.pfb\' . image-mode) (\.picon\' . image-mode) (\.pict\' . image-mode) (\.rgb\' . image-mode) (\.rgba\' . image-mode) (\.tga\' . image-mode) (\.wbmp\' . image-mode) (\.webp\' . image-mode) (\.wmf\' . image-mode) (\.wpg\' . image-mode) (\.xcf\' . image-mode) (\.xmp\' . image-mode) (\.xwd\' . image-mode) (\.yuv\' . image-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))

** Spielerei


