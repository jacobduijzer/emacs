#+TITLE: My Emacs Configuration
#+AUTHOR: Jacob Duijzer

* Repositories and Packages
** Repositories
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))
(package-initialize)
#+END_SRC 

** Setup =use-package= 
#+BEGIN_SRC emacs-lisp
(unless (fboundp 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+END_SRC
* General Emacs Setup, Layout & Theming
** emacs general setup
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
(setq inhibit-startup-message t)
(setq visible-bell nil
        ring-bell-function (lambda ()))
(setq org-startup-with-inline-images t)
(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)           ; Disable tooltips
(set-fringe-mode 10)        ; Give some breathing room
(menu-bar-mode -1)          ; Disable the menu bar
(blink-cursor-mode -1)
(display-time-mode 1)
(fset 'yes-or-no-p 'y-or-n-p)
(global-set-key (kbd "<escape>") 'keyboard-escape-quit) ; Make ESC quit prompts
#+END_SRC
** Auto-reload files
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode 1)
#+END_SRC
** Font settings
#+BEGIN_SRC emacs-lisp
(defvar runemacs/default-font-size 80)
(set-face-attribute 'default nil :font "Fira Code Retina" :height runemacs/default-font-size)
;;(set-face-attribute 'default nil :font "JetBrains Mono" :height runemacs/default-font-size)
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
;; theme / layout / font
(use-package spacemacs-common
    :ensure spacemacs-theme
    :config (load-theme 'spacemacs-dark t))
#+END_SRC
* Configure Packages
** Evil mode
#+BEGIN_SRC emacs-lisp
;; evil mode
(setq evil-want-keybinding nil)
(use-package evil
  :ensure t
  :init
  ;; have no modes shadow evil maps this has to be before evil gets initialized
  (advice-add 'evil-make-overriding-map :override #'ignore)
  (setq evil-intercept-maps nil)

  ;; visual line mode respect has to be set before
  (setq evil-respect-visual-line-mode t)
  (setq evil-want-C-u-scroll t)

  ;; enable evil
  (evil-mode 1)

  ;; custom keybindings
  (setq my-leader (kbd "SPC"))
  (define-key evil-motion-state-map my-leader nil)
  (defvar my-leader-map (make-sparse-keymap) "Keymap for 'leader key' shortcuts.")
  (evil-define-key 'normal (current-global-map) my-leader my-leader-map)
  (evil-define-key 'mortion (current-global-map) my-leader my-leader-map)
)
#+END_SRC
** Org mode
#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure t
  :defer t
  :config
  (define-key org-mode-map
	(kbd "RET") 'org-return-indent)
  ;; org-mode keybindings
  (evil-define-key 'normal org-mode-map
	(kbd "TAB") 'org-cycle
	(concat my-leader "c") 'org-ctrl-c-ctrl-c
	(concat my-leader "t") 'org-todo
	(concat my-leader "oa") '(lambda () (interactive) (org-agenda-file-to-front) (org-agenda))
	(concat my-leader "oA") 'org-archive-to-archive-sibling
	(concat my-leader "on") 'org-narrow-to-subtree
	(concat my-leader "ow") 'widen
	(concat my-leader "ot") 'org-time-stamp
	"gx" 'org-open-at-point)
  ;; add plantuml mode
  (add-to-list
   'org-src-lang-modes '("plantuml" . plantuml))

  ;; org-mode bindings that should work in visual mode
  (evil-define-key 'motion org-mode-map
    (concat my-leader "ol") 'org-insert-link
    (concat my-leader "os") 'org-store-link)
  ;; org agenda keybindings
  (evil-define-key 'normal org-agenda-mode-map
	(concat my-leader "t") 'org-agenda-todo
	(concat my-leader "r") 'org-agenda-redo
	(concat my-leader "oA") 'org-agenda-archive-to-archive-sibling)
    
  ;;settings
  (add-hook 'org-mode-hook 'auto-fill-mode)
  (add-hook 'org-mode-hook (lambda () (interactive)
								  (setq indent-tabs-mode nil)))
  (setq org-hide-leading-stars t
		org-tags-column 0
		org-agenda-tags-column 0
		org-archive-reversed-order t
		org-ellipsis " …")
  ;; truncate and wrap chars; org only makes display table on load when ellipsis is set, but that's
  ;; too late for adding custom glyphs, so make it ourselves
  (unless org-display-table
	(setq org-display-table (make-display-table)))
  (set-display-table-slot org-display-table 'truncation ?…)
  (set-display-table-slot org-display-table 'wrap ?…)

  ;; prevent org mode from repositioning the screen after (un)folding
  (remove-hook 'org-cycle-hook
			   #'org-optimize-window-after-visibility-change))
#+END_SRC
