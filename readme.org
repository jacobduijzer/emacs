#+TITLE: Emacs Configuration
#+AUTHOR: Jacob Duijzer

* Table of Contents
:PROPERTIES:
:TOC:      :include all :depth 4 :force (depth) :ignore (this) :local (nothing)
:END:
:CONTENTS:
- [[#general-emacs][General Emacs]]
  - [[#custom-functions][Custom Functions]]
    - [[#determine-os-type][Determine OS type]]
    - [[#auto-resize-emacs][Auto resize emacs]]
    - [[#center-window-on-current-monitor][Center window on current monitor]]
    - [[#restart-emacs][Restart Emacs]]
  - [[#repositories--packages-setup][Repositories & Packages setup]]
    - [[#repositories][Repositories]]
    - [[#setup-use-package][Setup use-package]]
    - [[#keep-emacsd-clean][Keep .emacs.d clean]]
    - [[#load-custom-files][Load custom files]]
  - [[#emacs-settings][Emacs settings]]
    - [[#settings][Settings]]
    - [[#auto-reload-files][Auto-reload files]]
    - [[#show-keybinding-panel-which-key][Show keybinding panel (which-key)]]
  - [[#layout--theming][Layout & Theming]]
    - [[#emojis-in-buffer][Emojis in buffer]]
    - [[#all-the-icons][All the icons]]
    - [[#font-settings][Font settings]]
    - [[#theme][Theme]]
- [[#mode-line][Mode Line]]
  - [[#basic-customization][Basic customization]]
  - [[#highlight-matching-braces][Highlight Matching Braces]]
- [[#editing-configuration][Editing Configuration]]
  - [[#tabs--spaces][Tabs & Spaces]]
  - [[#commenting-lines][Commenting Lines]]
  - [[#frame-scaling--zooming][Frame Scaling / Zooming]]
  - [[#line-numbering][Line numbering]]
  - [[#evil-mode][Evil mode]]
  - [[#ivy][Ivy]]
  - [[#completion-with-vertico][Completion with Vertico]]
  - [[#completion-annotations-with-marginalia][Completion Annotations with Marginalia]]
  - [[#org][Org]]
    - [[#org-mode][Org mode]]
    - [[#modern-org-style][modern Org Style]]
    - [[#update-toc-on-save][Update TOC on save]]
  - [[#fonts-and-bullets][Fonts and bullets]]
    - [[#indenting-of-source-in-org-mode][Indenting of source in org-mode]]
    - [[#capture--refile][Capture & Refile]]
    - [[#org-roam-try-out][Org-roam try-out]]
  - [[#other-applications][Other Applications]]
    - [[#blogging-with-hugo][Blogging with Hugo]]
    - [[#plantuml][PlantUML]]
    - [[#mermaid-and-org-babel-support][Mermaid and org-babel support]]
    - [[#presentations][Presentations]]
    - [[#markdown][Markdown]]
    - [[#reveal-presentations][Reveal presentations]]
  - [[#spielerei][Spielerei]]
:END:

* General Emacs 
** Custom Functions
*** Determine OS type

#+BEGIN_SRC emacs-lisp
;; check is system is macOS
(defun my/is-macos ()
	"Return true if system is darwin-based (Mac OS X)"
	(string-equal system-type "darwin"))

;; check if system is Windows
(defun my/is-windows ()
	"Return true if system is Windows-based"
  (string-equal system-type "windows-nt"))

;; check if system is GNU/Linux
(defun my/is-linux ()
	"Return true is system is GNU/Linux-based"
  (string-equal system-type "gnu/linux"))
#+END_SRC

*** Auto resize emacs

#+BEGIN_SRC emacs-lisp
;; Set initial frame size and position
(defun my/set-initial-frame ()
  (let* ((base-factor 0.70)
         (a-width (* (display-pixel-width) base-factor))
         (a-height (* (display-pixel-height) base-factor))
         (a-left (truncate (/ (- (display-pixel-width) a-width) 2)))
         (a-top (truncate (/ (- (display-pixel-height) a-height) 2))))
    (set-frame-position (selected-frame) a-left a-top)
    (set-frame-size (selected-frame) (truncate a-width)  (truncate a-height) t)))
(setq frame-resize-pixelwise t)
;;(my/set-initial-frame)
#+END_SRC

*** Center window on current monitor

#+BEGIN_SRC emacs-lisp
(defun my/frame-recenter (&optional frame)
  "Center FRAME on the screen.
FRAME can be a frame name, a terminal name, or a frame.
If FRAME is omitted or nil, use currently selected frame."
  (interactive)
  (unless (eq 'maximised (frame-parameter nil 'fullscreen))
    (modify-frame-parameters
     frame '((user-position . t) (top . 0.5) (left . 0.8)))))
                                        ;(my/frame-recenter)
#+END_SRC

*** Restart Emacs

#+BEGIN_SRC emacs-lisp
(defun mu-quit-or-restart (&optional restart)
  "Quit Emacs or restart it with RESTART."
  (interactive "P")
  (if restart
      (restart-emacs)
    (save-buffers-kill-terminal t)))
                                        ;(keymap-global-set "C-x C-c" #'mu-quit-or-restart)
(global-set-key (kbd "C-x C-x") 'mu-quit-or-restart)
#+END_SRC


** Repositories & Packages setup

*** Repositories

#+BEGIN_SRC emacs-lisp
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("melpa-stable" . "https://stable.melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))
(package-initialize)
#+END_SRC 

*** Setup use-package 

#+BEGIN_SRC emacs-lisp
(unless (fboundp 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+END_SRC

*** Keep .emacs.d clean 

#+BEGIN_SRC emacs-lisp
;; Change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
(setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
      url-history-file (expand-file-name "url/history" user-emacs-directory))

;; Use no-littering to automatically set common paths to the new user-emacs-directory
(use-package no-littering)

(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))
#+END_SRC

*** Load custom files

#+BEGIN_SRC emacs-lisp
(setq load-path (cons "~/.emacs.d/custom" load-path))
#+END_SRC

** Emacs settings
*** Settings
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
(setq inhibit-startup-message t)
(setq visible-bell nil
	    ring-bell-function (lambda ())) ; Just be quite, Emacs!
(setq org-startup-with-inline-images t)
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)           ; Disable tooltips
(set-fringe-mode 10)        ; Give some breathing room
(menu-bar-mode -1)          ; Disable the menu bar
(blink-cursor-mode -1)
(display-time-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)
(global-set-key (kbd "<escape>") 'keyboard-escape-quit) ; Make ESC quit prompts
(modify-all-frames-parameters	'((internal-border-width . 30)))	
;; transparency
;;(set-frame-parameter (selected-frame) 'alpha '(90 . 90))
;;(add-to-list 'default-frame-alist '(alpha . (90 . 90)))
#+END_SRC

*** Auto-reload files

#+BEGIN_SRC emacs-lisp
;; Revert buffers when the underlying file has changed
(global-auto-revert-mode 1)
#+END_SRC

*** Show keybinding panel (which-key)

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))
#+END_SRC

** Layout & Theming
*** Emojis in buffer

#+BEGIN_SRC emacs-lisp
(use-package emojify
  :hook (erc-mode . emojify-mode)
  :commands emojify-mode)
#+END_SRC

*** All the icons

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :ensure t)
#+END_SRC

*** Font settings

#+BEGIN_SRC emacs-lisp
(defvar runemacs/default-font-size 80)
(when (my/is-linux)
  (set-face-attribute 'default nil :font "JetBrainsMono Nerd Font" :height runemacs/default-font-size))
(when (my/is-windows)
  (set-face-attribute 'default nil :font "JetBrainsMONO NF" :height runemacs/default-font-size))
#+END_SRC

*** Theme

#+BEGIN_SRC emacs-lisp
(use-package modus-themes
	:ensure
	:init
	(setq modus-themes-italic-constructs t
        modus-themes-bold-constructs nil
        modus-themes-region '(bg-only no-extend))
	(modus-themes-load-themes)
	:config
                                        ;(modus-themes-load-operandi)            ; Light theme
  (modus-themes-load-vivendi)             ; Dark theme
	:bind ("<f5>" . modus-themes-toggle))
#+END_SRC

* Mode Line
** Basic customization

#+BEGIN_SRC emacs-lisp
(setq display-time-format "%l:%M %p %b %y"
      display-time-default-load-average nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package diminish)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package telephone-line
  :ensure t
  :config
  (setq 
	 telephone-line-evil-use-short-tag nil)
  (setq telephone-line-lhs
	      '((evil   . (telephone-line-evil-tag-segment))
	        (accent . (telephone-line-vc-segment
		                 telephone-line-erc-modified-channels-segment
		                 telephone-line-process-segment))
	        (nil    . (telephone-line-minor-mode-segment
		                 telephone-line-buffer-segment))))
  (setq telephone-line-rhs
	      '((nil    . (telephone-line-misc-info-segment))
	        (accent . (telephone-line-major-mode-segment))
	        (evil   . (telephone-line-airline-position-segment))))
  (telephone-line-mode 1)
  )
#+END_SRC

#+BEGIN_SRC emacs-lisp
                                        ;(use-package smart-mode-line
                                        ;  :disabled
                                        ;  :if dw/is-termux
                                        ;  :config
                                        ;  (setq sml/no-confirm-load-theme t)
                                        ;  (sml/setup)
                                        ;  (sml/apply-theme 'respectful)  ; Respect the theme colors
                                        ;  (setq sml/mode-width 'right
                                        ;      sml/name-width 60)
                                        ;
                                        ;  (setq-default mode-line-format
                                        ;  `("%e"
                                        ;      ,(when dw/exwm-enabled
                                        ;          '(:eval (format "[%d] " exwm-workspace-current-index)))
                                        ;      mode-line-front-space
                                        ;      evil-mode-line-tag
                                        ;      mode-line-mule-info
                                        ;      mode-line-client
                                        ;      mode-line-modified
                                        ;      mode-line-remote
                                        ;      mode-line-frame-identification
                                        ;      mode-line-buffer-identification
                                        ;      sml/pos-id-separator
                                        ;      (vc-mode vc-mode)
                                        ;      " "
                                        ;      ;mode-line-position
                                        ;      sml/pre-modes-separator
                                        ;      mode-line-modes
                                        ;      " "
                                        ;      mode-line-misc-info))
                                        ;
                                        ;  (setq rm-excluded-modes
                                        ;    (mapconcat
                                        ;      'identity
                                        ;      ; These names must start with a space!
                                        ;      '(" GitGutter" " MRev" " company"
                                        ;      " Helm" " Undo-Tree" " Projectile.*" " Z" " Ind"
                                        ;      " Org-Agenda.*" " ElDoc" " SP/s" " cider.*")
                                        ;      "\\|")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; You must run (all-the-icons-install-fonts) one time after
;; installing this package!

                                        ;(use-package minions
                                        ;  :hook (doom-modeline-mode . minions-mode))
                                        ;
                                        ;(use-package doom-modeline
                                        ;  :after eshell     ;; Make sure it gets hooked after eshell
                                        ;  :hook (after-init . doom-modeline-init)
                                        ;  :custom-face
                                        ;  (mode-line ((t (:height 0.85))))
                                        ;  (mode-line-inactive ((t (:height 0.85))))
                                        ;  :custom
                                        ;  (doom-modeline-height 15)
                                        ;  (doom-modeline-bar-width 6)
                                        ;  (doom-modeline-lsp t)
                                        ;  (doom-modeline-github nil)
                                        ;  (doom-modeline-mu4e nil)
                                        ;  (doom-modeline-irc nil)
                                        ;  (doom-modeline-minor-modes t)
                                        ;  (doom-modeline-persp-name nil)
                                        ;  (doom-modeline-buffer-file-name-style 'truncate-except-project)
                                        ;  (doom-modeline-major-mode-icon nil))
#+END_SRC

** Highlight Matching Braces

#+BEGIN_SRC emacs-lisp
(use-package paren
  :config
  (set-face-background 'show-paren-match (face-background 'default))
  (set-face-foreground 'show-paren-match "#FF8E0D")
  (set-face-attribute 'show-paren-match nil :weight 'bold)
  (show-paren-mode 1))
#+END_SRC


* Editing Configuration
** Tabs & Spaces

#+BEGIN_SRC emacs-lisp
                                        ; set tab with to 2 spaces
(setq-default tab-width 2)
(setq-default evil-shift-width tab-width)

                                        ;use spaces, not tabs
(setq-default indent-tabs-mode nil)
#+END_SRC

** Commenting Lines

#+BEGIN_SRC emacs-lisp
(use-package evil-nerd-commenter
  :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+END_SRC

** Frame Scaling / Zooming
Keybindings are: C+M+- and C+M++.

#+BEGIN_SRC emacs-lisp
(use-package default-text-scale
  :defer 1
  :config
  (default-text-scale-mode))
(global-set-key (kbd "C-M-+") 'default-text-scale-increase)
(global-set-key (kbd "C-M--") 'default-text-scale-decrease)
#+END_SRC

** Line numbering
#+BEGIN_SRC emacs-lisp
(defun cc/toggle-line-numbering ()
  "Toggle line numbering between absolute and relative."
  (interactive)
  (if (eq display-line-numbers 'relative)
      (setq display-line-numbers t)
    (setq display-line-numbers 'relative)))
;; toggle line numbers
(global-set-key (kbd "C-c C-l") 'display-line-numbers-mode)
;; toggle normal vs relative line numbers
(global-set-key (kbd "C-c l") 'cc/toggle-line-numbering)
#+END_SRC

** Evil mode

#+BEGIN_SRC emacs-lisp
;; evil mode
(setq evil-want-keybinding nil)
(use-package evil
  :ensure t
  :init
  ;; have no modes shadow evil maps this has to be before evil gets initialized
  (advice-add 'evil-make-overriding-map :override #'ignore)
  (setq evil-intercept-maps nil)

  ;; visual line mode respect has to be set before
  (setq evil-respect-visual-line-mode t)
  (setq evil-want-C-u-scroll t)

  ;; enable evil
  (evil-mode 1)

  ;; custom keybindings
  (setq my-leader (kbd "SPC"))
  (define-key evil-motion-state-map my-leader nil)
  (defvar my-leader-map (make-sparse-keymap) "Keymap for 'leader key' shortcuts.")
  (evil-define-key 'normal (current-global-map) my-leader my-leader-map)
  (evil-define-key 'mortion (current-global-map) my-leader my-leader-map)
  (evil-ex-define-cmd "q" 'kill-this-buffer)
  (evil-ex-define-cmd "quit" 'evil-quit)
  )
#+END_SRC

** Ivy

#+BEGIN_SRC emacs-lisp
(use-package ivy :demand
  :ensure t
  :init
  (ivy-mode 1)
  :diminish ivy-mode

  :config
  (setq ivy-use-virtual-buffers t
		    ivy-display-style 'plain
		    ivy-count-format "%d/%d ")
  ;;bindings
  (define-key my-leader-map "b" 'ivy-switch-buffer)
  )
#+END_SRC

** Completion with Vertico

#+BEGIN_SRC emacs-lisp
(defun dw/minibuffer-backward-kill (arg)
  "When minibuffer is completing a file name delete up to parent
folder, otherwise delete a word"
  (interactive "p")
  (if minibuffer-completing-file-name
      ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
      (if (string-match-p "/." (minibuffer-contents))
          (zap-up-to-char (- arg) ?/)
        (delete-minibuffer-contents))
    (backward-kill-word arg)))

(use-package vertico
  :bind (:map vertico-map
              ("C-j" . vertico-next)
              ("C-k" . vertico-previous)
              ("C-f" . vertico-exit)
              :map minibuffer-local-map
              ("M-h" . dw/minibuffer-backward-kill))
  :custom
  (vertico-cycle t)
  :custom-face
  (vertico-current ((t (:background "#3a3f5a"))))
  :init
  (vertico-mode))
#+END_SRC

** Completion Annotations with Marginalia

#+BEGIN_SRC emacs-lisp
(use-package marginalia
  :after vertico
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode))
#+END_SRC

#+RESULTS:

** Org
*** Org mode

#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure t
  :defer t
  :config
  (define-key org-mode-map
    (kbd "RET") 'org-return-indent)
  ;; org-mode keybindings
  (evil-define-key 'normal org-mode-map
    (kbd "TAB") 'org-cycle
    (concat my-leader "c") 'org-ctrl-c-ctrl-c
    (concat my-leader "t") 'org-todo
    (concat my-leader "oa") '(lambda () (interactive) (org-agenda-file-to-front) (org-agenda))
    (concat my-leader "oA") 'org-archive-to-archive-sibling
    (concat my-leader "on") 'org-narrow-to-subtree
    (concat my-leader "ow") 'widen
    (concat my-leader "ot") 'org-time-stamp
    "gx" 'org-open-at-point)
  ;; add plantuml mode
  (add-to-list
   'org-src-lang-modes '("plantuml" . plantuml))

  ;; org-mode bindings that should work in visual mode
  (evil-define-key 'motion org-mode-map
    (concat my-leader "ol") 'org-insert-link
    (concat my-leader "os") 'org-store-link)
  ;; org agenda keybindings
  (evil-define-key 'normal org-agenda-mode-map
    (concat my-leader "t") 'org-agenda-todo
    (concat my-leader "r") 'org-agenda-redo
    (concat my-leader "oA") 'org-agenda-archive-to-archive-sibling)

  ;;settings
  (add-hook 'org-mode-hook 'auto-fill-mode)
  (add-hook 'org-mode-hook (lambda () (interactive)
                             (setq indent-tabs-mode nil)))
  (setq org-hide-leading-stars t
        org-tags-column 0
        org-agenda-tags-column 0
        org-archive-reversed-order t
        org-ellipsis " …")
  ;; truncate and wrap chars; org only makes display table on load when ellipsis is set, but that's
  ;; too late for adding custom glyphs, so make it ourselves
  (unless org-display-table
    (setq org-display-table (make-display-table)))
  (set-display-table-slot org-display-table 'truncation ?…)
  (set-display-table-slot org-display-table 'wrap ?…)

  ;; prevent org mode from repositioning the screen after (un)folding
  (remove-hook 'org-cycle-hook
               #'org-optimize-window-after-visibility-change))

;; Always redisplay inline images after executing SRC block
(eval-after-load 'org
  (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images))
#+END_SRC

*** modern Org Style

#+BEGIN_SRC emacs-lisp
                                        ;(modus-themes-load-operandi)
(dolist (face '(window-divider
                window-divider-first-pixel
                window-divider-last-pixel))
  (face-spec-reset-face face)
  (set-face-foreground face (face-attribute 'default :background)))
(set-face-background 'fringe (face-attribute 'default :background))

(setq
 ;; Edit settings
 org-auto-align-tags nil
 org-tags-column 0
 org-catch-invisible-edits 'show-and-error
 org-special-ctrl-a/e t
 org-insert-heading-respect-content t

 ;; Org styling, hide markup etc.
 org-hide-emphasis-markers t
 org-pretty-entities t
 org-ellipsis "…"

 ;; Agenda styling
 org-agenda-block-separator ?─
 org-agenda-time-grid
 '((daily today require-timed)
   (800 1000 1200 1400 1600 1800 2000)
   " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
 org-agenda-current-time-string
 "⭠ now ─────────────────────────────────────────────────")

;; Enable org-modern-mode
(add-hook 'org-mode-hook #'org-modern-mode)
(add-hook 'org-agenda-finalize-hook #'org-modern-agenda)
#+END_SRC

#+RESULTS:

*** Update TOC on save

#+BEGIN_SRC emacs-lisp
(use-package org-make-toc
  :hook (org-mode . org-make-toc-mode))
#+END_SRC

#+RESULTS:

** Fonts and bullets

#+BEGIN_SRC emacs-lisp
                                        ;(use-package org-superstar
                                        ;  :after org
                                        ;  :hook (org-mode . org-superstar-mode)
                                        ;  :custom
                                        ;  ;; (org-superstar-remove-leading-stars t)
                                        ;  (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))
                                        ;
;;; Replace list hyphen with dot
;;; (font-lock-add-keywords 'org-mode
;;;                         '(("^ *\\([-]\\) "
;;;                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
                                        ;
;;; Increase the size of various headings
                                        ;(set-face-attribute 'org-document-title nil :font "JetBrainsMono Nerd Font" :weight 'bold :height 1.3)
                                        ;(dolist (face '((org-level-1 . 1.2)
                                        ;                (org-level-2 . 1.1)
                                        ;                (org-level-3 . 1.05)
                                        ;                (org-level-4 . 1.0)
                                        ;                (org-level-5 . 1.1)
                                        ;                (org-level-6 . 1.1)
                                        ;                (org-level-7 . 1.1)
                                        ;                (org-level-8 . 1.1)))
                                        ;  (set-face-attribute (car face) nil :font "JetBrainsMono Nerd Font" :weight 'medium :height (cdr face)))
                                        ;
;;; Make sure org-indent face is available
                                        ;(require 'org-indent)
                                        ;
;;; Ensure that anything that should be fixed-pitch in Org files appears that way
                                        ;(set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
                                        ;(set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
                                        ;(set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
                                        ;(set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
                                        ;(set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
                                        ;(set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
                                        ;(set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
                                        ;(set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
                                        ;(set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
                                        ;
;;; Get rid of the background on column views
                                        ;(set-face-attribute 'org-column nil :background nil)
                                        ;(set-face-attribute 'org-column-title nil :background nil)
#+END_SRC

*** Indenting of source in org-mode

#+BEGIN_SRC emacs-lisp
(setq org-src-preserve-indentation nil 
      org-edit-src-content-indentation 0)
#+END_SRC

*** Capture & Refile

#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file "~/Documents/Notes/inbox.org")
(setq org-reverse-note-order nil)
(setq org-refile-use-outline-path 'file)
(setq org-outline-path-complete-in-steps nil)
(setq org-refile-allow-creating-parent-nodes (quote confirm))
(setq org-blank-before-new-entry nil)
(setq org-refile-use-cache nil)
(setq org-refile-targets '((("~/Documents/Notes/inbox.org"
                             "~/Documents/Notes/personal.org"
                             "~/Documents/Notes/farmtrace.org"
                             "~/Documents/Notes/itcare.org"
                             "~/Documents/Notes/rockstars.org") . (:maxlevel . 3))))

(global-set-key (kbd "C-c c") 'org-capture)

(setq org-capture-templates
      (quote (
				      ("t" "Todo" entry (file+datetree org-default-notes-file)
						   "* TODO %? %U" :empty-lines 1) 
              ("n" "Note" entry (file+datetree org-default-notes-file)
	       		   "* NOTE %? %U" :empty-lines 1)
	            ("m" "Meeting" entry (file+datetree org-default-notes-file)
						   "* MEETING %? %U\n  With: \n" :empty-lines 1)
              ("s" "Standup" entry (file+datetree org-default-notes-file)
						   "* STANDUP %U\n Team: %?\n\n*** Yesterday\n\n*** Today\n\n*** Impediments\n\n" :prepend t :empty-lines 1)

	            ))) 
#+END_SRC

*** Org-roam try-out
Based on the videos of [[https://www.youtube.com/watch?v=YxgA5z2R08I][System Crafters]].

#+BEGIN_SRC emacs-lisp
(use-package org-roam
	:ensure t
	:init
	(setq org-roam-v2-ack t)
  :hook
  (after-init . org-roam-mode)
	:custom
	(org-roam-directory "~/Documents/org/org-roam")
	(org-roam-completion-everywhere t)
	;;(org-roam-capture-templates
	;; '(
  ;;   ("d" "default" plain "%?"
  ;;    :if-new (file+head "personal/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %<%Y-%m-%d %a %R>\n#+startup: showall\n\n")
	;;		:unarrowed t)
	;;	 ("c" "Contact" plain
  ;;    "* Details \n\n- Name: ${name}\n- Email: \n- Phone: \n\n* Information"
  ;;    :if-new (file+head "work/${project}/contacts/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %<%Y-%m-%d %a %R>\n#+filetags: contacts\n#+startup: showall\n\n")
	;;		:unarrowed t)
  ;;   ("m" "Meeting" plain
  ;;    "* Meeting ${subject}\nWith: ${with}\n\n%?"
  ;;    :if-new (file+head "work/${project}/meetings/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %<%Y-%m-%d %a %R>\n#+filetags: contacts\n#+startup: showall\n\n")
	;;		:unarrowed t)
	;;   ))
  (org-roam-dailies-directory "~/Documents/org/org-daily/")
 ;;(org-roam-dailies-capture-templates
 ;;   '(("d" "default" entry
 ;;      #'org-roam-capture--get-point
 ;;      "* %?"
 ;;      :file-name "Journal/%<%Y-%m-%d>"
 ;;      :head "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")
 ;;     ("t" "Task" entry
 ;;      #'org-roam-capture--get-point
 ;;      "* TODO %?\n  %U\n  %a\n  %i"
 ;;      :file-name "Journal/%<%Y-%m-%d>"
 ;;      :olp ("Tasks")
 ;;      :empty-lines 1
 ;;      :head "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")
 ;;     ("j" "journal" entry
 ;;      #'org-roam-capture--get-point
 ;;      "* %<%I:%M %p> - Journal  :journal:\n\n%?\n\n"
 ;;      :file-name "Journal/%<%Y-%m-%d>"
 ;;      :olp ("Log")
 ;;      :head "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")
 ;;     ("l" "log entry" entry
 ;;      #'org-roam-capture--get-point
 ;;      "* %<%I:%M %p> - %?"
 ;;      :file-name "Journal/%<%Y-%m-%d>"
 ;;      :olp ("Log")
 ;;      :head "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")
 ;;     ("m" "meeting" entry
 ;;      #'org-roam-capture--get-point
 ;;      "* %<%I:%M %p> - %^{Meeting Title}  :meetings:\n\n%?\n\n"
 ;;      :file-name "Journal/%<%Y-%m-%d>"
 ;;      :olp ("Log")
 ;;      :head "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")))
   :bind (
          ("C-c n l"   . org-roam)
          ("C-c n f"   . org-roam-find-file)
          ("C-c n d"   . org-roam-dailies-find-date)
          ("C-c n c"   . org-roam-dailies-capture-today)
          ("C-c n C r" . org-roam-dailies-capture-tomorrow)
          ("C-c n t"   . org-roam-dailies-find-today)
          ("C-c n y"   . org-roam-dailies-find-yesterday)
          ("C-c n r"   . org-roam-dailies-find-tomorrow)
          ("C-c n g"   . org-roam-graph)
	        :map org-mode-map
	        ("C-M-i" . completion-at-point))
   :config
   (org-roam-setup))
#+END_SRC

#+RESULTS:
: completion-at-point

** Other Applications
*** Blogging with Hugo

#+BEGIN_SRC emacs-lisp
;; Github Flavored Markdown exporter for Org Mode
(use-package ox-gfm
  :ensure t
  :after org
  :config
  (eval-after-load "org"
    '(require 'ox-gfm nil t))
  )
(use-package ox-hugo
  :ensure t
  :after ox)
#+END_SRC

*** PlantUML

#+BEGIN_SRC emacs-lisp
(use-package plantuml-mode
  :ensure t
  :config
  (setq plantuml-jar-path "/usr/share/java/plantuml/plantuml.jar")
  (setq plantuml-default-exec-mode 'jar)
  (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
  (add-to-list 'auto-mode-alist '("\\.pu\\'" . plantuml-mode))
  (add-to-list 'auto-mode-alist '("\\.puml\\'" . plantuml-mode))
  (setq plantuml-output-type "png"))

(setq org-plantuml-jar-path (expand-file-name "/usr/share/java/plantuml/plantuml.jar"))
(org-babel-do-load-languages 'org-babel-load-languages '((plantuml .t)))
(with-eval-after-load 'ox-hugo
  (add-to-list 'org-hugo-special-block-type-properties '("mermaid" . (:raw t))))
#+END_SRC

*** Mermaid and org-babel support

#+BEGIN_SRC emacs-lisp
(use-package ob-mermaid
  :ensure t)

;;  (defun mermaid/post-init-org ()
;;      (spacemacs|use-package-add-hook org
;;          :post-config (add-to-list 'org-babel-load-languages '(mermaid . t))))

;;  (defun mermaid/init-ob-mermaid ()
;;      (use-package ob-mermaid))

(setq ob-mermaid-cli-path "/usr/bin/mmdc")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package format-all
  :preface
  (defun ian/format-code ()
    "Auto-format whole buffer."
    (interactive)
    (if (derived-mode-p 'prolog-mode)
        (prolog-indent-buffer)
      (format-all-buffer)))
  :config
  (global-set-key (kbd "M-F") #'ian/format-code)
  (add-hook 'prog-mode-hook #'format-all-ensure-formatter))
#+END_SRC

*** Presentations
   
   org-present is the package I use for giving presentations in Emacs. I like it because it's simple and allows me to customize the display of it pretty easily.

#+BEGIN_SRC emacs-lisp
(defun dw/org-present-prepare-slide ()
  (org-overview)
  (org-show-entry)
  (org-show-children))

(defun dw/org-present-hook ()
  (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
                                     (header-line (:height 4.5) variable-pitch)
                                     (org-code (:height 1.55) org-code)
                                     (org-verbatim (:height 1.55) org-verbatim)
                                     (org-block (:height 1.25) org-block)
                                     (org-block-begin-line (:height 0.7) org-block)))
  (setq header-line-format " ")
  (org-display-inline-images)
  (dw/org-present-prepare-slide))

(defun dw/org-present-quit-hook ()
  (setq-local face-remapping-alist '((default variable-pitch default)))
  (setq header-line-format nil)
  (org-present-small)
  (org-remove-inline-images))

(defun dw/org-present-prev ()
  (interactive)
  (org-present-prev)
  (dw/org-present-prepare-slide))

(defun dw/org-present-next ()
  (interactive)
  (org-present-next)
  (dw/org-present-prepare-slide))

(use-package org-present
  :bind (:map org-present-mode-keymap
         ("C-c C-j" . dw/org-present-next)
         ("C-c C-k" . dw/org-present-prev))
  :hook ((org-present-mode . dw/org-present-hook)
         (org-present-mode-quit . dw/org-present-quit-hook)))
#+END_SRC

*** Markdown

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  ;; :straight t
  :mode "\\.md\\'"
  :config
  (setq markdown-command "marked")
  (defun dw/set-markdown-header-font-sizes ()
    (dolist (face '((markdown-header-face-1 . 1.2)
                    (markdown-header-face-2 . 1.1)
                    (markdown-header-face-3 . 1.0)
                    (markdown-header-face-4 . 1.0)
                    (markdown-header-face-5 . 1.0)))
      (set-face-attribute (car face) nil :weight 'normal :height (cdr face))))

  (defun dw/markdown-mode-hook ()
    (dw/set-markdown-header-font-sizes))

  (add-hook 'markdown-mode-hook 'dw/markdown-mode-hook))
#+END_SRC

*** Reveal presentations

#+BEGIN_SRC emacs-lisp
;; Reveal.js + Org mode
(require 'ox-reveal)
(setq org-reveal-root "file:///home/jacob/projects/github/presentations/reveal.js")
(setq org-reveal-title-slide nil)
#+END_SRC

   #+BEGIN_SRC emacs-lisp
;;(add-to-list 'load-path "~/.sonic-pi.el/")
;;(require 'sonic-pi)
;;(setq sonic-pi-path "/home/jacob/projects/others/sonic-pi/") ; Must end with "/"
;;
;;;; Optionally define a hook
;;(add-hook 'sonic-pi-mode-hook
;;          (lambda ()
;;            ;; This setq can go here instead if you wish
;;            (setq sonic-pi-path "/home/jacob/projects/others/sonic-pi/")
;;            (define-key ruby-mode-map "\C-c\C-b" 'sonic-pi-stop-all)))
   #+END_SRC

** Spielerei

#+BEGIN_SRC emacs-lisp
(setq display-time-format "%l:%M %p %b %y"
      display-time-default-load-average nil)

(use-package smart-mode-line
  :disabled
  :if dw/is-termux
  :config
  (setq sml/no-confirm-load-theme t)
  (sml/setup)
  (sml/apply-theme 'respectful)  ; Respect the theme colors
  (setq sml/mode-width 'right
      sml/name-width 60)

  (setq-default mode-line-format
  `("%e"
      ,(when dw/exwm-enabled
          '(:eval (format "[%d] " exwm-workspace-current-index)))
      mode-line-front-space
      evil-mode-line-tag
      mode-line-mule-info
      mode-line-client
      mode-line-modified
      mode-line-remote
      mode-line-frame-identification
      mode-line-buffer-identification
      sml/pos-id-separator
      (vc-mode vc-mode)
      " "
      ;mode-line-position
      sml/pre-modes-separator
      mode-line-modes
      " "
      mode-line-misc-info))

  (setq rm-excluded-modes
    (mapconcat
      'identity
      ; These names must start with a space!
      '(" GitGutter" " MRev" " company"
      " Helm" " Undo-Tree" " Projectile.*" " Z" " Ind"
      " Org-Agenda.*" " ElDoc" " SP/s" " cider.*")
      "\\|")))
#+END_SRC


