#+TITLE: Emacs Configurationj
#+AUTHOR: Jacob Duijzer

* Table Of Contents                                                   :TOC_4:
- [[#startup][Startup]]
    - [[#setup-packageel-to-work-with-melpa][Setup Package.el To Work With MELPA]]
  - [[#use-package][Use-package]]
  - [[#faster-startup][Faster startup]]
    - [[#garbage-collection][Garbage collection]]
    - [[#native-compile][Native Compile]]
  - [[#keep-emacs-dir-clean][Keep emacs dir clean]]
  - [[#restart-emacs][Restart Emacs]]
  - [[#evil-mode][Evil mode]]
  - [[#general-keybindings][General Keybindings]]
  - [[#custom-functions][Custom functions]]
    - [[#determine-os-type][Determine OS type]]
    - [[#auto-resize-emacs][Auto resize emacs]]
    - [[#set-emacs-position-on-screen][Set emacs' position on screen]]
    - [[#resize-and-screen-location-keybindings][Resize and screen-location keybindings]]
    - [[#splits-and-window-controls][Splits and window controls]]
  - [[#dashboard][Dashboard]]
    - [[#configuring-dashboard][Configuring Dashboard]]
    - [[#dashboard-in-emacsclient][Dashboard in Emacsclient]]
- [[#configuration-layout-theme-fonts][Configuration, Layout, theme, fonts]]
  - [[#general-configuration][General configuration]]
  - [[#modeline][Modeline]]
  - [[#all-the-icons][All the icons]]
  - [[#fonts][Fonts]]
  - [[#theme][Theme]]
- [[#editing][Editing]]
  - [[#code-formatting][Code formatting]]
  - [[#commenting-lines][Commenting lines]]
  - [[#frame-scaling--zooming][Frame scaling / zooming]]
  - [[#line-numbers][Line numbers]]
- [[#etc][Etc]]
  - [[#ivy][Ivy]]
  - [[#vterm][VTerm]]
  - [[#projectile][Projectile]]
  - [[#org-mode][Org mode]]
    - [[#org][Org]]
    - [[#org-definitions][Org definitions]]
    - [[#source-code-block-syntax-highlighting][Source Code Block Syntax Highlighting]]
    - [[#bullets][Bullets]]
    - [[#automatically-create-toc][Automatically create TOC]]
    - [[#yasnippet][YASnippet]]
  - [[#org-capture--refile][Org Capture & refile]]
  - [[#which-key][Which key]]
- [[#other-applications][Other applications]]
  - [[#blogging-with-hugo][Blogging with Hugo]]
  - [[#plantuml][PlantUML]]
  - [[#mermaid][Mermaid]]
  - [[#rust][Rust]]
  - [[#magit][Magit]]

* Startup
To make sure everything loads correctly, we start with some basic setup.

*** Setup Package.el To Work With MELPA

#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
;;(package-refresh-contents)
;;(package-initialize)
#+END_SRC

** Use-package
Install use-package and enable ‘:ensure t’ globally.  The ‘:ensure’ keyword causes the package(s) within use-package statements to be installed automatically if not already present on your system.  To avoid having to add ‘:ensure t’ to every use-package statement in this config, I set ‘use-package-always-ensure’.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(setq use-package-always-ensure t)
#+END_SRC

** Faster startup
This section is where it make emacs faster to load.

*** Garbage collection
Makes startup faster by reducing the frequency of garbage collection
#+begin_src emacs-lisp
;; Using garbage magic hack.
 (use-package gcmh
   :config
   (gcmh-mode 1))
;; Setting garbage collection threshold
(setq gc-cons-threshold 402653184
      gc-cons-percentage 0.6)

;; Profile emacs startup
(add-hook 'emacs-startup-hook
	(lambda () (interactive)
		(my/frame-resize)
		(my/frame-move 0.5 0.5)))
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

;; Silence compiler warnings as they can be pretty disruptive (setq comp-async-report-warnings-errors nil)
#+end_src

#+RESULTS:
| (lambda nil (interactive) (my/frame-resize) (my/frame-move 0.5 0.5)) | #[0 \301!\210eb\210\302 \210\303\304!\207 [dashboard-buffer-name switch-to-buffer redisplay run-hooks dashboard-after-initialize-hook] 2] | (lambda nil (message *** Emacs loaded in %s with %d garbage collections. (format %.2f seconds (float-time (time-subtract after-init-time before-init-time))) gcs-done)) | (lambda nil (interactive) ((my/frame-resize) (my/frame-move 0.5 0.5))) |

*** Native Compile
#+begin_src emacs-lisp
;; Silence compiler warnings as they can be pretty disruptive
(if (boundp 'comp-deferred-compilation)
    (setq comp-deferred-compilation nil)
    (setq native-comp-deferred-compilation nil))
;; In noninteractive sessions, prioritize non-byte-compiled source files to
;; prevent the use of stale byte-code. Otherwise, it saves us a little IO time
;; to skip the mtime checks on every *.elc file.
(setq load-prefer-newer noninteractive)
#+end_src

** Keep emacs dir clean

#+BEGIN_SRC emacs-lisp
(setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
	url-history-file (expand-file-name "url/history" user-emacs-directory))

(use-package no-littering)

(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
	(load custom-file))
#+END_SRC

** Restart Emacs

#+BEGIN_SRC emacs-lisp
(defun save-and-kill-this-buffer()(interactive)(save-buffer)(kill-current-buffer))
(setq confirm-kill-emacs #'yes-or-no-p)
#+END_SRC

#+RESULTS:
: yes-or-no-p

** Evil mode
Evil is an extensible ‘vi’ layer for Emacs. It emulates the main features of Vim, and provides facilities for writing custom extensions.  Evil Collection is also installed since it adds ‘evil’ bindings to parts of Emacs that the standard Evil package does not cover, such as: calenda, help-mode adn ibuffer.

#+BEGIN_SRC emacs-lisp
(use-package evil
    :init      ;; tweak evil's configuration before loading it
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-respect-visual-line-mode t)
    (evil-mode))

(use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-ex-define-cmd "wq" 'save-and-kill-this-buffer)
    (evil-collection-init))
#+END_SRC

** General Keybindings
General.el allows us to set keybindings.  As a longtime Doom Emacs user, I have grown accustomed to using SPC as the prefix key.  General makes setting keybindings (especially with SPC) much easier.  All of the keybindings we set later in the config depend on general being loaded.

#+BEGIN_SRC emacs-lisp
(use-package general
  :config
  (general-evil-setup t))
#+END_SRC

** Custom functions
*** Determine OS type
#+BEGIN_SRC emacs-lisp
(defconst on-linux (string-equal system-type "gnu/linux"))
(defconst on-windows (string-equal system-type "windows-nt"))
(defconst on-mac (string-equal system-type "darwin"))
#+END_SRC

*** Auto resize emacs

#+BEGIN_SRC emacs-lisp
  (defun my/frame-monitor-usable-height (factor &optional frame)
    "Return the usable height in pixels of the monitor of FRAME.
  FRAME can be a frame name, a terminal name, or a frame.
  If FRAME is omitted or nil, use currently selected frame.

  Uses the monitor's workarea. See `display-monitor-attributes-list'."
    (cadddr (frame-monitor-workarea frame))
    (truncate (* (cadddr (frame-monitor-workarea frame)) factor)))

(defun my/frame-resize (&optional frame)
    (interactive)
    (set-frame-size (selected-frame) (truncate 1500) (my/frame-monitor-usable-height 0.8) t)
)
  ;;(my/resize-and-center)
#+END_SRC

*** Set emacs' position on screen

#+BEGIN_SRC emacs-lisp
(defun my/frame-move (left top &optional frame)
    " frame on the screen.
    frame can be a frame name, a terminal name, or a frame.
    if frame is omitted or nil, use currently selected frame."
    (interactive)
    (unless (eq 'maximised (frame-parameter nil 'fullscreen))
	(modify-frame-parameters
	frame `((user-position . t) (top . ,top) (left . ,left)))))

;;(my/frame-move 0.5 0.5)
#+END_SRC

#+RESULTS:
: my/frame-move

*** Resize and screen-location keybindings

| COMMAND                | DESCRIPTION                     | KEYBINDING |
|------------------------+---------------------------------+------------|
| my/frame-resize        | /resize emacs do default/         | SPC s n    |
| my/frame-move 0.5 0.5  | /move frame to center/            | SPC s cc   |
| my/frame-move 0.5 0.5  | /move frame to center and resize/ | SPC s cr   |
| my/frame-move 0.98 0.5 | /move frame to right/             | SPC s mr   |
| my/frame-move 0.02 0.5 | /move frame to left/              | SPC s ml   |

#+BEGIN_SRC emacs-lisp
(nvmap :prefix "SPC"
    "s r" '(my/frame-resize :which-key "Resize window") 
    "s cc" '((lambda () (interactive) (my/frame-move 0.5 0.5)) :which-key "Center window.")
    "s cr" '((lambda () (interactive) (my/frame-resize) (my/frame-move 0.5 0.5)) :which-key "Center & Resize window.")
    "s mr" '(lambda () (interactive) (my/frame-move 0.98 0.5) :which-key "Move window to the right.")
    "s ml" '(lambda () (interactive) (my/frame-move 0.02 0.5) :which-key "Move window to the left.")
)

;; resize and reload on load
(my/frame-resize)
(my/frame-move 0.5 0.5)

#+END_SRC

#+RESULTS:

*** Splits and window controls

#+begin_src emacs-lisp
(winner-mode 1)
(nvmap :prefix "SPC"
       ;; Window splits
       "w c"   '(evil-window-delete :which-key "Close window")
       "w n"   '(evil-window-new :which-key "New window")
       "w s"   '(evil-window-split :which-key "Horizontal split window")
       "w v"   '(evil-window-vsplit :which-key "Vertical split window")
       ;; Window motions
       "w h"   '(evil-window-left :which-key "Window left")
       "w j"   '(evil-window-down :which-key "Window down")
       "w k"   '(evil-window-up :which-key "Window up")
       "w l"   '(evil-window-right :which-key "Window right")
       "w w"   '(evil-window-next :which-key "Goto next window")
       ;; winner mode
       "w <left>"  '(winner-undo :which-key "Winner undo")
       "w <right>" '(winner-redo :which-key "Winner redo"))
#+end_src

#+RESULTS:

** Dashboard

Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.

*** Configuring Dashboard

#+begin_src emacs-lisp
(use-package dashboard
    :init      ;; tweak dashboard config before loading it
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-init-info t)
    ;;(setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
    ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
    (setq dashboard-startup-banner "~/.emacs.d/emacs-dash.png")  ;; use custom image as banner
    (setq dashboard-center-content nil) ;; set to 't' for centered content
    (setq dashboard-set-footer nil)
    (setq dashboard-items '((recents . 5)
                            (agenda . 5 )
                            (bookmarks . 3)
                            (projects . 3)
                            (registers . 3)))
  :config
  (dashboard-setup-startup-hook)
  (dashboard-modify-heading-icons '((recents . "file-text")
			      (bookmarks . "book"))))
#+end_src

*** Dashboard in Emacsclient
This setting ensures that emacsclient always opens on *dashboard* rather than *scratch*.

#+begin_src emacs-lisp
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src

* Configuration, Layout, theme, fonts
** General configuration

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (blink-cursor-mode -1)
  (modify-all-frames-parameters '((internal-border-width . 50)))
(setq scroll-conservatively 101) ;; value greater than 100 gets rid of half page jumping
(setq mouse-wheel-scroll-amount '(3 ((shift) . 3))) ;; how many lines at a time
(setq mouse-wheel-progressive-speed t) ;; accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
#+END_SRC

#+RESULTS:
: t

** Modeline

TODO: change to a better, more functional mood line.

#+BEGIN_SRC emacs-lisp
(use-package mood-line
    :config (mood-line-mode))
#+END_SRC

** All the icons

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)
#+END_SRC

** Fonts
#+BEGIN_SRC emacs-lisp
(defvar runemacs/default-font-size 80)
(when on-linux
    (set-face-attribute 'default nil :font "JetBrainsMono Nerd Font" :height runemacs/default-font-size))
(when on-windows
    (set-face-attribute 'default nil :font "JetBrainsMONO NF" :height runemacs/default-font-size))
#+END_SRC

** Theme

#+BEGIN_SRC emacs-lisp
(use-package modus-themes
:ensure
:init
(setq modus-themes-italic-constructs t
	modus-themes-bold-constructs nil
	modus-themes-region '(bg-only no-extend))
(modus-themes-load-themes)
:config
					;(modus-themes-load-operandi)            ; Light theme
(modus-themes-load-vivendi)             ; Dark theme
:bind ("<f5>" . modus-themes-toggle))
#+END_SRC

* Editing
** Code formatting

#+BEGIN_SRC emacs-lisp
(use-package format-all)

(nvmap :prefix "SPC"
	"f a" 'format-all-buffer)

(add-hook 'prog-mode-hook #'format-all-ensure-formatter)
#+END_SRC

** Commenting lines

#+BEGIN_SRC emacs-lisp
(use-package evil-nerd-commenter
	:bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+END_SRC

** Frame scaling / zooming

#+BEGIN_SRC emacs-lisp
(use-package default-text-scale
	:defer 1
	:config
	(default-text-scale-mode))
(global-set-key (kbd "C-M-+") 'default-text-scale-increase)
(global-set-key (kbd "C-M--") 'default-text-scale-decrease) 
(global-set-key (kbd "C-M-0") 'default-text-scale-reset)
#+END_SRC

** Line numbers

| COMMAND                   | DESCRIPTION             | KEYBINDING |
|---------------------------+-------------------------+------------|
| cc/toggle-line-numbering  | /Toggle line number mode/ | SPC l t    |
| display-line-numbers-mode | /Diplay line numbers/     | SPC l d    |

#+BEGIN_SRC emacs-lisp
(defun cc/toggle-line-numbering ()
    "Toggle line numbering between absolute and relative."
    (interactive)
    (if (eq display-line-numbers 'relative)
        (setq display-line-numbers t)
      (setq display-line-numbers 'relative)))

(nvmap :prefix "SPC"
	"l t" '(cc/toggle-line-numbering :which-key "Toggle line numbering.")
	"l d" 'display-line-numbers-mode :which-key "Display line numbers.")
#+END_SRC

* Etc
** Ivy

#+BEGIN_SRC emacs-lisp
  (use-package counsel
      :after ivy
      :config (counsel-mode))

  (use-package ivy
	:defer 0.1
	:diminish
	:custom
	(setq ivy-count-format "(%d/%d) ")
	(setq ivy-use-virtual-buffers t)
	(setq enable-recursive-minibuffers t)
	:config
	(ivy-mode))

  (nvmap :prefix "SPC"
    "b" 'ivy-switch-buffer :which-key "Ivy switch buffer")

#+END_SRC

** VTerm

#+BEGIN_SRC emacs-lisp
(use-package vterm)
#+END_SRC

** Projectile

#+BEGIN_SRC emacs-lisp
  (use-package projectile
	:diminish projectile-mode
	:config (projectile-mode)
	:custom ((projectile-completion-system 'ivy))
	:init
	(setq projectile-project-search-path '("~/projects/"))
	(setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
	:config (counsel-projectile-mode))

  (nvmap :prefix "SPC"
            "p" 'projectile-command-map)

#+END_SRC

** Org mode

*** Org

#+BEGIN_SRC emacs-lisp
(use-package org
	:ensure t
	:defer t
	:config
	(define-key org-mode-map
		(kbd "RET") 'org-return-indent)
	(evil-define-key 'normal org-mode-map
		(kbd "TAB") 'org-cycle))
#+END_SRC

*** Org definitions

#+BEGIN_SRC emacs-lisp
;;(with-eval-after-load 'org       
;;    (setq org-startup-indented t) ; Enable `org-indent-mode' by default
(add-hook 'org-mode-hook
	(lambda ()
		(visual-line-mode 1)))
(setq	org-directory "~/Documents/org"
	org-default-notes-file (expand-file-name "notes.org" org-directory)
	org-ellipsis " ▼ "
	org-log-done 'time
	org-journal-dir "~/Org/journal/"
	org-journal-date-format "%B %d, %Y (%A) "
	org-journal-file-format "%Y-%m-%d.org"
	org-hide-emphasis-markers t)
(setq org-src-preserve-indentation nil
      org-src-tab-acts-natively t
      org-edit-src-content-indentation 0)
#+END_SRC

#+RESULTS:
: 0

*** Source Code Block Syntax Highlighting

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t
    org-src-tab-acts-natively t
    org-confirm-babel-evaluate nil)
#+END_SRC

*** Bullets

#+BEGIN_SRC emacs-lisp
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC

*** Automatically create TOC
#+BEGIN_SRC emacs-lisp
(use-package toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+END_SRC

*** YASnippet

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
	:config
	(setq yas-snippet-dirs '("~/Documents/org/yasnippets"))
	(yas-global-mode 1))
#+END_SRC

#+RESULTS:
: t

** Org Capture & refile

#+BEGIN_SRC emacs-lisp
(defun load-org-agenda-files-recursively (dir) "Find all directories in DIR."
    (unless (file-directory-p dir) (error "Not a directory `%s'" dir))
    (unless (equal (directory-files dir nil org-agenda-file-regexp t) nil)
        (add-to-list 'org-agenda-files dir))
    (dolist (file (directory-files dir nil nil t))
        (unless (member file '("." ".."))
            (let ((file (concat dir file "/")))
                (when (file-directory-p file)
                    (load-org-agenda-files-recursively file))))))
(load-org-agenda-files-recursively "~/Documents/org/") 

(setq	org-refile-use-cache nil
		org-refile-use-outline-path 'file
		org-refile-allow-creating-parent-nodes (quote confirm)
		org-refile-targets '((org-agenda-files :maxlevel . 2))
          org-outline-path-complete-in-steps nil)

(setq org-capture-templates
        (quote (
                ("t" "Todo" entry (file+datetree org-default-notes-file)
                "* TODO %? %U" :prepend t)
                ("n" "Note" entry (file+datetree org-default-notes-file)
                "* NOTE %? %U" :empty-lines 1 :prepend t)
                ("m" "Meeting" entry (file+datetree org-default-notes-file)
                "* MEETING %? %U\n  With: \n" :empty-lines 1 :prepend t)
                ("s" "Standup" entry (file+datetree org-default-notes-file)
                "* STANDUP %U\n Team: %?\n\n*** Yesterday\n\n*** Today\n\n*** Impediments\n\n" :prepend t :empty-lines 1)
                ("c" "Coaching" entry (file+datetree org-default-notes-file)
                "* COACHING %U\n With: %?\n\n*** 1. KICKOFF: What's on your mind?\n\n*** 2. AWE: ...and what else?\n\n*** 3. FOCUS: What's the real challenge here for you?\n\n*** 4. FOUNDATION: What do you want?\n\n*** 5. LAZY: How can I help?\n\n*** 6. PRIO: If you are saying 'yes' to this, what are you saying 'no' to?\n\n*** 7. LEARNING: What was most useful for you?\n" :prepent t :empty-lines 1)
                )))

(nvmap :prefix "SPC"
    "c" 'org-capture)
#+END_SRC

#+RESULTS:

** Which key

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :init
  (setq which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-side-window-slot -10
        which-key-side-window-max-height 0.25
        which-key-idle-delay 0.8
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit t
        which-key-separator " → " ))
(which-key-mode)
#+END_SRC

* Other applications
** Blogging with Hugo

#+BEGIN_SRC emacs-lisp
;; Github Flavored Markdown exporter for org mode
(use-package ox-gfm
	:ensure t
	:after org
	:config
	(eval-after-load "org"
		'(require 'ox-gfm nil t)))

(use-package ox-hugo
	:ensure t
	:after ox)
#+END_SRC

** PlantUML

#+BEGIN_SRC emacs-lisp
(use-package plantuml-mode
	:ensure t
	:config
	(setq plantuml-jar-path "/usr/share/java/plantuml/plantuml.jar")
	(setq plantuml-default-exec-mode 'jar)
	(add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
	(add-to-list 'auto-mode-alist '("\\.pu\\'" . plantuml-mode))
	(add-to-list 'auto-mode-alist '("\\.puml\\'" . plantuml-mode))
	(setq plantuml-output-type "png"))
	(setq org-plantuml-jar-path (expand-file-name "/usr/share/hava/plantuml/plantuml.jar"))
	(org-babel-do-load-languages 'org-babel-load-languages '((plantuml .t)))
	(with-eval-after-load 'ox-hugo
		(add-to-list 'org-hugo-special-block-type-properties '("mermaid" . (:raw t))))
#+END_SRC

** Mermaid

#+BEGIN_SRC emacs-lisp
(use-package ob-mermaid
    :ensure t)

(setq ob-mermaid-cli-path "/usr/bin/mmdc")
#+END_SRC

** Rust

#+BEGIN_SRC emacs-lisp
(require 'rust-mode)
  (add-hook 'rust-mode-hook
    (lambda () (setq indent-tabs-mode nil)))
(setq rust-format-on-save t)
(add-hook 'rust-mode-hook
    (lambda () (prettify-symbols-mode)))
(define-key rust-mode-map (kbd "C-c C-c") 'rust-run)
#+END_SRC

** Magit

The best Git implementation for Emacs.

#+BEGIN_SRC emacs-lisp
(use-package magit
    :ensure t)
#+END_SRC
